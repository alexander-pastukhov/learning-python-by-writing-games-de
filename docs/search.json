[{"path":"index.html","id":"intro","chapter":"Kapitel 1 Einleitung","heading":"Kapitel 1 Einleitung","text":"Dieses Buch wird dich das Programmieren lehren. Hoffentlich auf eine spaßige Art und Weise, denn wenn es etwas Befriedigenderes gibt als ein Videospiel zu spielen, dann ist es, eines zu erstellen. Obwohl es für den Kurs “Python für soziale und experimentelle Psychologie” geschrieben wurde, ist mein Hauptziel nicht, dir Python sich beizubringen. Python ist ein fantastisches Werkzeug (mehr dazu später), aber es ist nur eine von vielen existierenden Programmiersprachen. Mein ultimatives Ziel ist es, dir dabei zu helfen, allgemeine Programmierfähigkeiten zu entwickeln, die nicht von einer spezifischen Programmiersprache abhängen, und sicherzustellen, dass du gute Gewohnheiten entwickelst, die deinen Code klar, leicht lesbar und leicht zu warten machen. Dieser letzte Teil ist entscheidend. Programmieren geht nicht nur darum, Code zu schreiben, der funktioniert. Das muss natürlich gegeben sein, ist aber nur die Mindestanforderung. Programmieren geht darum, einen klaren und leicht lesbaren Code zu schreiben, den andere und, noch wichtiger, du selbst zwei Wochen später verstehen kannst.","code":""},{"path":"index.html","id":"ziel-des-buches","chapter":"Kapitel 1 Einleitung","heading":"1.1 Ziel des Buches","text":"Das Ziel ist, dass du der Lage bist, ein anspruchsvolles Experiment zu programmieren, das mehrere Blöcke und Versuche, verschiedene Bedingungen, komplizierte visuelle Darstellungen, automatische Datenaufzeichnung und Fehlerbehandlung haben kann. Wenn das ambitioniert klingt, dann ist es das auch, aber wir werden kleinen Schritten vorgehen und im Prozess wirst du lernen.Kernkonzepte von Python einschließlich\nVariablen und Konstanten\nunveränderliche Datentypen wie Ganzzahlen, Fließkommazahlen, Zeichenketten, logische Werte und Tupel\nveränderliche Typen wie Listen und Dictionaries\nFunktionen\nSteuerungsstrukturen wie -else-Bedingungen und Schleifen\nobjektorientierte Programmierung einschließlich Konzepte des Vererbung, (optional) Duck-Typing und Mischung\nAusnahmen\nDateioperationen\nVariablen und Konstantenunveränderliche Datentypen wie Ganzzahlen, Fließkommazahlen, Zeichenketten, logische Werte und Tupelveränderliche Typen wie Listen und DictionariesFunktionenSteuerungsstrukturen wie -else-Bedingungen und Schleifenobjektorientierte Programmierung einschließlich Konzepte des Vererbung, (optional) Duck-Typing und MischungAusnahmenDateioperationenPsychoPy: Dies ist nicht Kern-Python, aber es ist eine erstklassige Bibliothek für psychophysische Experimente und du wirst die Schlüsselwerkzeuge lernen, die für die Programmierung eines Experiments erforderlich sind.Guter Programmierstil einschließlich\nKlaren Code iterativer Weise schreiben\nLesen (deines eigenen) Codes\nDokumentieren deines Codes\nDebuggen deines Programms VS Code\nKlaren Code iterativer Weise schreibenLesen (deines eigenen) CodesDokumentieren deines CodesDebuggen deines Programms VS CodeIch habe versucht, Konzepte dem Kontext zu präsentieren, der sie erfordert und daher besten erklärt und ihre typischen Anwendungsszenarien darstellt. Das bedeutet, dass das Material rund um verteilt ist und auf Bedarfsbasis präsentiert wird. Zum Beispiel wird das Konzept der Listen zuerst präsentiert, aber Operationen daran werden einem späteren Kapitel vorgestellt, sowohl weil wir dies erst später benötigen als auch um dein Gefühl, überwältigt zu sein, einem vernünftigen Rahmen zu halten. Dies macht es schwieriger, dieses Buch als Referenz zu verwenden (es gibt ausgezeichnete Referenzen da draußen, angefangen mit der offiziellen Python-Dokumentation), aber die Hoffnung ist, dass es dir durch die Bereitstellung von mundgerechten Informationsbrocken leichter fallen wird, das Material zu verstehen und es mit dem zu integrieren, du bereits weißt.Die gleiche “verteilte” Logik gilt für Übungen. Anstatt Ende jedes Kapitels aufgelistet zu sein, sind sie den Text eingebettet und du solltest sie zu diesem Zeitpunkt erledigen. Viele von ihnen dienen dazu, Konzepte zu verdeutlichen, die zuvor anhand von anschaulichen Beispielen präsentiert wurden, daher wäre es hilfreich, sie sofort durchzuführen. Gleiches gilt für die Programmierübung, obwohl du diesem Fall das gesamte Material lesen kannst, um eine “Vogelperspektive” auf das gesamte Programm zu bekommen und dann den Text erneut zu lesen und die Programmierübung durchzuführen.","code":""},{"path":"index.html","id":"voraussetzungen","chapter":"Kapitel 1 Einleitung","heading":"1.2 Voraussetzungen","text":"Dieses Material setzt keine Vorkenntnisse Python oder Programmierung beim Leser voraus. Sein Ziel ist es, dein Wissen schrittweise aufzubauen und dir zu ermöglichen, immer komplexere Spiele zu erstellen.","code":""},{"path":"index.html","id":"warum-spiele","chapter":"Kapitel 1 Einleitung","heading":"1.3 Warum Spiele?","text":"Der eigentliche Zweck dieses Kurses ist es, Psychologie- und Sozialwissenschaftsstudenten beizubringen, wie man Experimente programmiert. Das ist es, worum es der echten Forschung geht. Allerdings gibt es zwischen den beiden praktisch wenig Unterschied. Die grundlegenden Zutaten sind die gleichen und, man könnte sagen, Experimente sind einfach nur langweilige Spiele. Und sei versichert, wenn du ein Spiel programmieren kannst, kannst du sicherlich auch ein Experiment programmieren.","code":""},{"path":"index.html","id":"warum-sollte-ein-psychologe-programmieren-lernen","chapter":"Kapitel 1 Einleitung","heading":"1.4 Warum sollte ein Psychologe Programmieren lernen?","text":"Warum sollte ein Psychologe, der Menschen interessiert ist, lernen, wie man Computer programmiert? Die offensichtlichste Antwort ist, dass dies eine nützliche Fähigkeit ist. Wenn du programmieren kannst, hast du die Freiheit, ein Experiment zu erstellen, das deine Forschungsfrage beantwortet, und nicht ein Experiment, das aufgrund der Beschränkungen deiner Software implementiert werden kann.Noch wichtiger, zumindest aus meiner Sicht, ist, dass das Erlernen des Programmierens die Art und Weise, wie du im Allgemeinen denkst, verändert. Menschen sind klug, aber Computer sind dumm1. Wenn du dein Experiment oder deine Reisepläne jemandem erklärst, kannst du ziemlich vage sein, einen kleinen Fehler machen, sogar bestimmte Teile überspringen. Menschen sind klug, daher werden sie die fehlenden Informationen mit ihrem Wissen ergänzen, einen Fehler finden und korrigieren, dich nach mehr Informationen fragen und selbst improvisieren können, sobald sie auf etwas stoßen, das du nicht abgedeckt hast. Computer sind dumm, also musst du präzise sein, du kannst keine Grauzonen haben, du kannst nichts dem “es wird herausfinden, wenn es passiert” (es wird es nicht) überlassen. Meine persönliche Erfahrung, die von Psychologen bestätigt wurde, die das Programmieren gelernt haben, ist, dass es dir bewusst macht, wie vage und ungenau Menschen sein können, ohne es zu merken (und ohne dass du es merkst). Programmieren zwingt dich dazu, präzise und gründlich zu sein, für alle Eventualitäten zu planen, die es geben könnte. Und das ist sich eine sehr nützliche Fähigkeit, da sie auf alle Aktivitäten angewendet werden kann, die Planung erfordern, sei es ein experimentelles Design oder Reisevorkehrungen.","code":""},{"path":"index.html","id":"warum-python","chapter":"Kapitel 1 Einleitung","heading":"1.5 Warum Python?","text":"Es gibt viele Möglichkeiten, ein Experiment für psychologische Forschung zu erstellen. Du kannst Drag--Drop-Systeme verwenden, entweder kommerzielle wie Presentation, Experiment Builder oder kostenlose wie PsychoPy Builder Interface. Sie haben eine viel flachere Lernkurve, sodass du schneller mit dem Erstellen und Durchführen deiner Experimente beginnen kannst. Ihre einfache Handhabung hat jedoch einen Preis: Sie sind recht begrenzt, welche Reize du verwenden kannst und wie du die Präsentation, Bedingungen, Feedback etc. steuern kannst. der Regel erlauben sie dir, sie zu erweitern, indem du das gewünschte Verhalten programmierst, aber du musst wissen, wie man das macht (Python-Kenntnisse bereichern deine PsychoPy-Experimente). Daher denke ich, dass diese Systeme, insbesondere PsychoPy, großartige Werkzeuge sind, um schnell ein einfaches Experiment zusammenzusetzen. Sie sind jedoch nützlichsten, wenn du verstehst, wie sie den zugrunde liegenden Code erstellen und wie du ihn selbst programmieren würdest. Dann wirst du nicht durch die Software eingeschränkt, da du weißt, dass du etwas programmieren kannst, der Standard-Drag--Drop nicht zulässt. Gleichzeitig kannst du dich immer dafür entscheiden, wenn Drag--Drop ausreichend, aber schneller ist, oder du kannst eine Kombination aus beiden Ansätzen verwenden. Ende geht es darum, Optionen und kreative Freiheit zu haben, ein Experiment zu programmieren, das deine Forschungsfrage beantwortet, und nicht nur ein Experiment, das deine Software erlaubt zu programmieren.Wir werden das Programmieren Python lernen, eine großartige Sprache, die eine einfache und klare Syntax mit der Kraft und Fähigkeit kombiniert, fast jedes Problem zu bewältigen. diesem Seminar konzentrieren wir uns auf Desktop-Experimente, aber Sie können es für Online-Experimente (oTree und PsychoPy), wissenschaftliche Programmierung (NumPy und SciPy), Datenanalyse (pandas), Maschinelles Lernen (scikit-learn), Deep Learning (keras), Website-Programmierung (django), Computer Vision (OpenCV) usw. verwenden. Daher ist Python eines der vielseitigsten Programmierwerkzeuge, die Sie für alle Phasen Ihrer Forschung oder Arbeit verwenden können. Und Python ist kostenlos, dass Sie sich keine Sorgen machen müssen, ob Sie oder Ihr zukünftiger Arbeitgeber die Lizenzgebühren bezahlen können (ein sehr reales Problem, wenn Sie Matlab verwenden).","code":""},{"path":"index.html","id":"seminar-spezifische-informationen","chapter":"Kapitel 1 Einleitung","heading":"1.6 Seminar-spezifische Informationen","text":"Dies ist ein Material für das Seminar Python für Sozial- und Experimentelle Psychologie, wie ich es der Universität Bamberg lehre. Jedes Kapitel behandelt ein einzelnes Spiel und führt die notwendigen Ideen ein und wird von Übungen begleitet, die Sie absolvieren und einreichen müssen. Um das Seminar zu bestehen, müssen Sie alle Aufgaben absolvieren, d.h., alle Spiele schreiben. Sie müssen nicht alle Übungen abschließen oder korrekte Lösungen für alle Übungen liefern, um den Kurs zu bestehen und Informationen darüber, wie die Punkte für Übungen eine tatsächliche Note (falls Sie eine benötigen) oder “Bestanden” umgerechnet werden, werden während des Seminars verfügbar sein.Das Material ist strukturiert, dass jedes Kapitel oder Kapitelabschnitt typischerweise einer einzelnen Sitzung entspricht, außer für die abschließenden Kapitel, die auf komplexeren Spielen basieren und daher mehr Zeit Anspruch nehmen. Wir sind jedoch alle verschieden, also arbeiten Sie Ihrem eigenen Tempo, lesen Sie das Material und reichen Sie Aufgaben eigenständig ein. Ich werde für jede Aufgabe detailliertes Feedback geben und Ihnen die Möglichkeit bieten, Probleme anzugehen und erneut einzureichen, ohne Punkte zu verlieren. Beachten Sie, dass mein Feedback nicht nur die tatsächlichen Probleme mit dem Code abdeckt, sondern auch die Art und Weise, wie Sie die Lösung implementiert haben und wie sauber und gut dokumentiert Ihr Code ist. Denken Sie daran, unsere Aufgabe ist es nicht nur, zu lernen, wie man ein funktionierendes Spiel programmiert, sondern wie man einen schönen, klaren, leicht zu lesenden und zu wartenden Code schreibt2.Sehr wichtig: Zögern Sie nicht, Fragen zu stellen. Wenn ich das Gefühl habe, dass Sie die Informationen im Material übersehen haben, werde ich Sie auf die genaue Stelle hinweisen. Wenn Sie verwirrt sind, werde ich Sie sanft mit Fragen dazu anregen, Ihr eigenes Problem zu lösen. Wenn Sie mehr Informationen benötigen, werde ich diese liefern. Wenn Sie einfach mehr wissen wollen, fragen Sie und ich werde erklären, warum die Dinge sind, wie sie sind, oder vorschlagen, Sie lesen sollten. Wenn ich das Gefühl habe, dass Sie das Problem ohne meine Hilfe lösen können, werde ich Ihnen das sagen (obwohl ich wahrscheinlich trotzdem noch ein paar andeutende Fragen stellen würde).","code":""},{"path":"index.html","id":"über-das-material","chapter":"Kapitel 1 Einleitung","heading":"1.7 Über das Material","text":"Dieses Material ist kostenlos zu nutzen und steht unter der Lizenz Creative Commons Namensnennung-NichtKommerziell-KeineBearbeitung V4.0 International Lizenz.","code":""},{"path":"Software.html","id":"Software","chapter":"Kapitel 2 Software","heading":"Kapitel 2 Software","text":"Für dieses Buch und das Seminar müssen wir installierenPsychoPy.IDE Ihrer Wahl. Meine Anleitungen werden für Visual Studio Code sein, das eine sehr gute Python-Unterstützung bietet.Jupyter Notebook zum Ausprobieren kleiner Code-Snippets.Ich werde keine detaillierten Anleitungen zur Installation der notwendigen Software geben, sondern Sie eher auf die offiziellen Handbücher verweisen. Dies macht diesen Text zukunftssicherer, da sich spezifische Details leicht ändern könnten3.","code":""},{"path":"Software.html","id":"install-psychopy","chapter":"Kapitel 2 Software","heading":"2.1 PsychoPy","text":"Wenn Sie Windows verwenden, laden Sie die Standalone PsychoPy Version herunter und installieren Sie diese. Verwenden Sie die neueste (und beste) Ihnen vorgeschlagene PsychoPy-Version (PsychoPy 2023.2.2 mit Python 3.8 zum Zeitpunkt des Schreibens) und folgen Sie den Anweisungen.Wenn Sie Mac oder Linux verwenden, sind die Installation von PsychoPy über pip oder Anaconda Ihre Optionen. Bitte folgen Sie den aktuellen Anweisungen.","code":""},{"path":"Software.html","id":"install-vs-code","chapter":"Kapitel 2 Software","heading":"2.2 VS Code","text":"Visual Studio Code ist ein kostenloser, leichtgewichtiger Open-Source-Editor mit starker Unterstützung für Python. Laden Sie den Installer für Ihre Plattform herunter und folgen Sie den Anweisungen.Befolgen Sie als nächstes das Tutorial Getting Started Python VS Code. Wenn Sie Windows und die Standalone-Installation von PsychoPy verwenden, überspringen Sie den Abschnitt Install Python interpreter, da Sie bereits eine Python-Installation haben, die mit PsychoPy gebündelt ist. Dies ist der Interpreter, den Sie im Abschnitt Select Python interpreter verwenden sollten. meinem Fall ist der Pfad C:\\Program Files\\PsychoPy3\\python.exe.Installieren und aktivieren Sie einen Linter, eine Software, die syntaxtische und stilistische Probleme Ihrem Python-Quellcode hervorhebt. Folgen Sie dem Handbuch auf der Webseite von VS Code.","code":""},{"path":"Software.html","id":"jupyter-notebooks","chapter":"Kapitel 2 Software","heading":"2.3 Jupyter Notebooks","text":"Jupyter Notebooks bieten eine sehr bequeme Möglichkeit, Text, Bilder und Code einem einzigen Dokument zu mischen. Sie erleichtern auch das Ausprobieren verschiedener kleiner Code-Snippets parallel ohne das Ausführen von Skripten. Wir werden uns für unser erstes Kapitel und gelegentliche Übungen oder Code-Tests später darauf verlassen. Es gibt zwei Möglichkeiten, wie Sie sie verwenden können: 1) VS Code mit der Jupyter-Erweiterung, 2) Ihrem Browser mit der klassischen Oberfläche.","code":""},{"path":"Software.html","id":"jupyter-notebooks-in-vs-code","chapter":"Kapitel 2 Software","heading":"2.3.1 Jupyter Notebooks in VS Code","text":"Folgen Sie der Anleitung, wie Sie das Jupyter-Paket installieren und Notebooks VS Code verwenden.","code":""},{"path":"Software.html","id":"jupyter-notebooks-in-anaconda","chapter":"Kapitel 2 Software","heading":"2.3.2 Jupyter Notebooks in Anaconda","text":"Die einfachste Möglichkeit, Jupyter Notebooks zusammen mit vielen anderen nützlichen Data-Science-Tools zu verwenden, ist über das Anaconda Toolkit. Beachten Sie jedoch, dass dies eine zweite Python-Distribution Ihrem System installiert. Dies könnte wiederum zu Verwirrung führen, wenn Sie mit Skripten VS Code arbeiten und versehentlich den Anaconda-Interpreter statt den PsychoPy-Interpreter aktiv haben. Keine Panik, folgen Sie den Select Python interpreter Anweisungen und stellen Sie sicher, dass Sie den PsychoPy-Interpreter als den aktiven haben.Ansonsten laden Sie Anaconda herunter und installieren Sie es. Die Website hat einen ausgezeichneten Getting started Abschnitt.","code":""},{"path":"Software.html","id":"files-folder","chapter":"Kapitel 2 Software","heading":"2.4 Ordnung halten","text":"Bevor wir anfangen, schlage ich vor, dass Sie einen Ordner namens games--python (oder ähnlich) erstellen. Wenn Sie sich dafür entschieden haben, Jupyter Notebooks über Anaconda zu nutzen, sollten Sie diesen Ordner Ihrem Benutzerordner erstellen, da Anaconda dort die Dateien erwartet. Dann erstellen Sie einen neuen Unterordner für jedes Kapitel / Spiel. Für das Seminar müssten Sie einen Ordner mit allen Dateien zippen und hochladen.","code":""},{"path":"programming-tips.html","id":"programming-tips","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"Kapitel 3 Programmier-Tipps und -Tricks","text":"Bevor Sie Ihren ersten Code schreiben, müssen wir über die Kunst des Programmierens sprechen. Wie ich bereits erwähnt habe, geht es nicht nur darum, dass der Code funktioniert, sondern darum, dass er leicht zu verstehen ist. Korrekt funktionierender Code ist ein schönes Plus, aber wenn ich zwischen einem Spaghetti-Code, der momentan korrekt funktioniert, und einem klar geschriebenen und dokumentierten Code, der noch repariert werden muss, wählen muss, werde ich immer Letzteren bevorzugen. Ich kann Dinge reparieren, die ich verstehe, ich kann nur hoffen, wenn ich das nicht tue.Unten sind einige Tipps zum Schreiben und Lesen von Code. Einige mögen beim ersten Lesen kryptisch klingen (sie werden klar, sobald wir das notwendige Material behandeln). Einige werden sich für die einfachen Projekte, die wir umsetzen werden, als Overkill anfühlen. Ich schlage vor, dass Sie diesen Abschnitt beim ersten Mal ungezwungen lesen, aber oft darauf zurückkommen, sobald wir ernsthaft mit Programmieren beginnen. Leider werden diese Tricks nicht funktionieren, wenn Sie sie nicht benutzen! Daher sollten Sie sie immer benutzen und sie sollten Ihre guten Gewohnheiten werden, wie das Anlegen eines Sicherheitsgurtes. Der Sicherheitsgurt ist den meisten (hoffentlich allen) Tagen nicht nützlich, aber Sie tragen ihn, weil er plötzlich und sehr dringend extrem nützlich werden könnte und Sie nie sicher sein können, wann das passieren wird. Gleiches gilt für das Programmieren. Oft werden Sie versucht sein, einen “quick-n-dirty” Code zu schreiben, weil es sich nur um einen “einfachen Test”, eine temporäre Lösung, einen Prototyp, ein Pilotexperiment, usw. handelt. Aber wie man schön sagt: “Es gibt nichts Beständigeres als eine provisorische Lösung”. Häufiger als nicht werden Sie feststellen, dass Ihr Spielzeugcode zu einem ausgewachsenen Experiment herangewachsen ist und es ein Durcheinander ist. Oder Sie möchten zu dem Pilotexperiment zurückkehren, das Sie vor ein paar Monaten durchgeführt haben, aber Sie stellen fest, dass es einfacher ist, von vorne zu beginnen, als zu verstehen, wie dieses Monster funktioniert4. Widerstehen Sie also der Versuchung! Bilden Sie gute Gewohnheiten und Ihr zukünftiges Ich wird sehr dankbar sein!","code":""},{"path":"programming-tips.html","id":"schreibtipps","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.1 Den Code schreiben","text":"","code":""},{"path":"programming-tips.html","id":"verwende-einen-linter","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.1.1 Verwende einen Linter","text":"Ein Linter ist ein Programm, das deinen Code-Stil analysiert und highlightet Probleme, die es findet: unnötige Leerzeichen, fehlende Leerzeichen, falsche Namen, übermäßig lange Zeilen, usw. Diese haben keinen Einflluss darauf, wie der Code ausgeführt wird, aber das Befolgen der Linter-Ratschläge führt zu einem konsistenten Standard, wenn auch langweiligen[^ “Langweilig ist gut!”, siehe den Film “Hitman’s Bodyguard.”] Python Code. Versuche, alle Probleme zu beheben, die der Linter aufgeworfen hat. Verwende jedoch dein besseres Urteilsvermögen, denn manchmal sind Zeilen, die länger sind als der Linter es bevorzugen würde, lesbarer als zwei kürzere. Ebenso kann ein “schlechter” Variablenname nach den Standards des Linters für einen Psychologen eine aussagekräftige Bezeichnung sein. Denke daran, dein Code ist für Menschen, nicht für den Linter.","code":""},{"path":"programming-tips.html","id":"dokumentiere-deinen-code","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.1.2 Dokumentiere deinen Code","text":"Jedes Mal, wenn du eine neue Datei erstellst: dokumentiere sie und aktualisiere die Dokumentation, wann immer du neue Funktionen oder Klassen hinzufügst/änderst/löschst. Jedes Mal, wenn du eine neue Funktion erstellst: dokumentiere sie. Neue Klasse: dokumentiere sie. Neue Konstante: es sei denn, es ist alleine aus dem Namen klar, dokumentiere sie. Du wirst eine NumPy Methode der Dokumentation dem Buch lernen.Ich kann nicht genug betonen, wie wichtig es ist, deinen Code zu dokumentieren. VS Code (ein Editor, den wir verwenden werden) ist intelligent genug, um NumPy Docstrings zu parsen, also wird es dir diese Hilfe anzeigen, wann immer du deine eigenen Funktionen verwendest (hilft dir, dir selbst zu helfen!). Noch wichtiger ist, dass das Schreiben von Dokumentationen dich dazu zwingt, menschlicher Sprache zu denken und zu formulieren, die Funktion oder Klasse macht, welchen Typ die Argumente / Attribute / Methoden haben, der Bereich der gültigen Werte ist, die Standards sind, eine Funktion zurückgeben sollte usw. Mehr als oft nicht, wirst du feststellen, dass du ein wichtiges Detail übersehen hast, das aus dem Code selbst nicht ersichtlich ist.","code":""},{"path":"programming-tips.html","id":"füge-etwas-luft-hinzu","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.1.3 Füge etwas Luft hinzu","text":"Trenne Codeblöcke durch einige leere Zeilen. Denke Absätze im normalen Text. Du würdest nicht wollen, dass dein Buch ein einziger Absatz-Alptraum ist? Platziere vor jedem Codeblock einen Kommentar, der erklärt, er macht, aber nicht wie er es macht. Zum Beispiel wird es unserem typischen PsychoPy-basierten Spiel einen Punkt geben, dem wir alle Reize zeichnen und das Fenster aktualisieren. Das ist ein schöner selbstständiger Codeblock, der als # Zeichnen aller Reize beschrieben werden kann. Der Code liefert Details darüber, genau gezeichnet wird, die Zeichenreihenfolge ist, usw. Aber dieser einzelne Kommentar hilft dir zu verstehen, worum es diesem Codeblock geht und ob er für dich momentan relevant ist.\nDas Gleiche gilt für # Verarbeitung von Tastendrücken oder # Überprüfung der Spielende-Bedingungen, usw. Aber sei vorsichtig und stelle sicher, dass der Kommentar den Code korrekt beschreibt. Wenn der Kommentar zum Beispiel # Zeichnen aller Reize sagt, sollte es nirgendwo anders einen Code zum Zeichnen von Reizen geben und keinen weiteren Code, der etwas anderes tut!","code":""},{"path":"programming-tips.html","id":"schreibe-deinen-code-schritt-für-schritt","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.1.4 Schreibe deinen Code Schritt für Schritt","text":"Dein Motto sollte “langsam aber stetig” lauten. Auf diese Weise werde ich dich durch die Spiele führen. Beginne immer mit etwas extrem Einfachem wie einem statischen Rechteck oder Bild. Stelle sicher, dass es funktioniert. Füge eine kleinere Funktionalität hinzu: Farbwechsel, Positionsänderung, ein weiteres Rechteck, speichere es als Attribut, usw. Stelle sicher, dass es funktioniert. Gehe niemals zum nächsten Schritt, es sei denn, du verstehst vollständig, dein aktueller Code macht und du bist dir zu 100% sicher, dass er sich verhält, wie er sollte. Und ich meine 100% ernst! Wenn du auch nur den Schatten eines Zweifels hast, überprüfe es erneut. Andernfalls wird dieser Schatten wachsen und dich zunehmend unsicher über deinen Code machen. Dieser Ansatz Schildkrötengeschwindigkeit mag albern und übermäßig langsam erscheinen, ist aber immer noch schneller, als einen großen Codeblock zu schreiben und dann zu versuchen, ihn zum Laufen zu bringen. Es ist viel einfacher, einfache Probleme einzeln zu lösen, als viele auf einmal.","code":""},{"path":"programming-tips.html","id":"es-ist-nichts-falsches-an-stackoverflow","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.1.5 Es ist nichts Falsches an StackOverflow","text":"Ja, man kann immer versuchen, eine Lösung für sein Problem auf StackOverflow zu finden5. Ich mache das die ganze Zeit! Sie sollten die bereitgestellte Lösung jedoch nur verwenden, wenn Sie sie verstehen! Kopieren Sie nicht einfach den Code, der ein Problem wie Ihres zu lösen scheint. Wenn Sie das tun und Sie haben Glück, könnte es funktionieren. Oder, wieder wenn Sie Glück haben, funktioniert es auf eine offensichtliche Weise nicht. Aber wenn Sie nicht viel Glück haben, wird es (manchmal) subtil falsch funktionieren. Und da Sie nicht wirklich wussten, der Code tat, als Sie ihn einfügten, werden Sie noch mehr verwirrt sein. Nutzen Sie also StackOverflow als eine Quelle des Wissens, nicht als eine Quelle zum Kopieren und Einfügen von Code!","code":""},{"path":"programming-tips.html","id":"reading-tips","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.2 Den Code lesen","text":"Das Lesen von Code ist einfach, weil Computer dumm sind und Sie schlau sind. Das bedeutet, dass die Anweisungen, die Sie dem Computer geben, notwendigerweise sehr einfach sind und daher für einen Menschen sehr leicht zu verstehen sind. Das Lesen von Code ist jedoch auch schwierig, weil Computer dumm sind und Sie schlau sind. Sie sind schlau, dass Sie nicht einmal den gesamten Code lesen müssen, um zu verstehen, er tut. Sie lesen nur die Schlüsselstellen und füllen die Lücken aus. Leider neigen Sie dazu, Fehler zu überlesen. Dies ist nicht nur beim Programmieren der Fall, wenn Sie jemals einen Text Korrektur gelesen haben, wissen Sie, wie schwierig es ist, Tippfehler zu finden. Ihr Gehirn korrigiert sie Echtzeit mit Hilfe des Kontexts und Sie lesen das Wort , wie es sein sollte, nicht , wie es tatsächlich geschrieben ist6.Meine Erfahrung mit Programmierung im Allgemeinen und im Besonderen auf diesem Seminar ist, dass die meisten Probleme, bei denen Sie stecken bleiben, im Nachhinein einfach bis dumm und offensichtlich sind7. Verzweifeln Sie nicht! Es liegt nicht Ihnen, sondern ist lediglich eine Folge davon, wie wunderbar Ihr Gehirn für die Mustererkennung verdrahtet ist. Im Folgenden finden Sie einige Vorschläge, die Ihnen helfen könnten, das Lesen von Code robuster zu gestalten.","code":""},{"path":"programming-tips.html","id":"denken-sie-wie-ein-computer","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.2.1 Denken Sie wie ein Computer","text":"Lesen Sie den Code Zeile für Zeile und “führen Sie ihn aus”, wie es der Computer tun würde. Verwenden Sie Stift und Papier, um den Überblick über die Variablen zu behalten. Verfolgen Sie, welche Codeblöcke wann erreicht werden können. Verlangsamen Sie sich und stellen Sie sicher, dass Sie jede Zeile verstehen und der Lage sind, den Überblick über die Variablen zu behalten. Sobald Sie das tun, wird es einfach sein, einen Fehler zu erkennen.","code":""},{"path":"programming-tips.html","id":"tun-sie-so-als-hätten-sie-diesen-code-in-ihrem-leben-noch-nie-gesehen","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.2.2 Tun Sie so, als hätten Sie diesen Code in Ihrem Leben noch nie gesehen","text":"Nehmen Sie , Sie haben keine Ahnung, der Code tut. Wie ich schrieb, sehen Sie oft wörtlich einen Fehler nicht, weil Ihr Gehirn Details auffüllt und die Realität biegt, dass sie Ihren Erwartungen entspricht8. Sie wissen, dieser Codeblock tun sollte, also lesen Sie ihn statt dessen nur flüchtig und nehmen , dass er tut, er soll, es sei denn, es sieht offensichtlich schrecklich falsch aus. Es ist schwer, Ihre Erwartungen auszuschalten, aber es ist immens hilfreich.","code":""},{"path":"programming-tips.html","id":"suchen-sie-nicht-nur-unter-der-straßenlampe","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.2.3 Suchen Sie nicht nur unter der Straßenlampe","text":"Immer wenn Sie neuen Code verwenden oder etwas implementieren müssen, das kompliziert erscheint, und Ihr Code nicht funktioniert, wie er sollte, neigen Sie dazu, anzunehmen, dass das Problem beim neuen, ausgefallenen Code liegt. Einfach, weil er neu, ausgefallen und kompliziert ist. Meiner Erfahrung nach versteckt sich der Fehler jedoch typischerweise der einfacheren “trivialen” Codezeile der Nähe, die Sie nie richtig anschauen, weil sie einfach und trivial ist. Überprüfen Sie alles, nicht nur die Stellen, denen Sie einen Fehler vermuten.","code":""},{"path":"programming-tips.html","id":"nutzen-sie-den-debugger","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.2.4 Nutzen Sie den Debugger","text":"Im Buch werden Sie lernen, wie Sie die Ausführung Ihres Spiels anhalten können, um seinen Zustand zu untersuchen. Nutzen Sie dieses Wissen! Setzen Sie Haltepunkte und führen Sie den Code Schritt für Schritt aus. Überprüfen Sie die Werte von Variablen im Tab “Watch”. Verwenden Sie die Debug-Konsole, um zu überprüfen, ob Funktionen die Ergebnisse liefern, die sie sollten. Teilen Sie komplexe Bedingungen oder mathematische Formeln kleine Teile auf, kopieren und führen Sie diese Teile der Debug-Konsole aus und überprüfen Sie, ob die Zahlen zusammenpassen. Stellen Sie sicher, dass ein Codeblock Ordnung ist und analysieren Sie dann den nächsten. Das Debuggen ist besonders hilfreich, um den Code zu identifizieren, der nicht erreicht wird oder zum falschen Zeitpunkt erreicht wird.","code":""},{"path":"programming-tips.html","id":"zen-von-python","chapter":"Kapitel 3 Programmier-Tipps und -Tricks","heading":"3.3 Zen von Python","text":"Ich fand den Zen von Python als gute Inspiration, um die Programmierung anzugehen.","code":""},{"path":"python-grundlagen.html","id":"python-grundlagen","chapter":"Kapitel 4 Python Grundlagen","heading":"Kapitel 4 Python Grundlagen","text":"Hoffentlich hast du bereits einen speziellen Ordner für dieses Buch erstellt. Lade das Übungs-Notebook herunter (Alt+Klick sollte es eher herunterladen als öffnen), lege es den Ordner des Kapitels und öffne es, siehe die relevanten Anweisungen. Du musst zwischen den Erklärungen hier und den Übungen im Notizbuch hin und wechseln, also halte sie beide offen.","code":""},{"path":"python-grundlagen.html","id":"konzepte-des-kapitels","chapter":"Kapitel 4 Python Grundlagen","heading":"4.1 Konzepte des Kapitels","text":"Variablen.Konstanten.Grundlegende Werttypen.Dinge ausdrucken.Werte Zeichenketten einfügen.","code":""},{"path":"python-grundlagen.html","id":"variablen","chapter":"Kapitel 4 Python Grundlagen","heading":"4.2 Variablen","text":"Das erste grundlegende Konzept, mit dem wir uns vertraut machen müssen, ist die Variable. Variablen werden verwendet, um Informationen zu speichern, und du kannst sie dir als eine Kiste mit einem Namensschild vorstellen, die du etwas hineinlegen kannst. Das Namensschild auf dieser Kiste ist der Name der Variable und ihr Wert ist das, du darin speicherst. Zum Beispiel können wir eine Variable erstellen, die die Anzahl der Beine speichert, die ein Spielfigur hat. Wir beginnen mit einer für einen Menschen typischen Zahl.Python würdest du schreibenDie obige Zuweisungsanweisung hat eine sehr einfache Struktur:Der Variablenname (das Namensschild auf der Kiste) sollte aussagekräftig sein, er kann mit Buchstaben oder _ beginnen und kann Buchstaben, Zahlen und das Symbol _ enthalten, aber keine Leerzeichen, Tabs, Sonderzeichen usw. Python empfiehlt9 dass du die snake_case Schreibweise (alles Kleinbuchstaben, Unterstrich für Leerzeichen) verwendest, um deine Variablennamen zu formatieren. Der <Wert> auf der rechten Seite ist eine komplexere Geschichte, da er fest codiert sein kann (wie im obigen Beispiel), berechnet werden kann, indem andere Variablen oder dieselbe Variable, zurückgegeben von einer Funktion, usw. verwendet werden.Die Verwendung von Variablen bedeutet, dass du dich auf die Bedeutung der entsprechenden Werte konzentrieren kannst, anstatt dir Sorgen darüber zu machen, diese Werte sind. Beispielsweise kannst du das nächste Mal, wenn du etwas auf Grundlage der Anzahl der Beine eines Charakters berechnen musst (z.B., wie viele Paar Schuhe benötigt ein Charakter), dies auf Grundlage des aktuellen Wertes der Variablen anzahl_der_beine berechnen, anstatt anzunehmen, dass es 1 ist.Variablen geben dir auch Flexibilität. Ihre Werte können sich während des Programmablaufs ändern: Der Punktestand des Spielers steigt, die Anzahl der Leben nimmt ab, die Anzahl der Zauber, die er wirken kann, steigt oder fällt je nach ihrem Einsatz, usw. Dennoch kannst du immer den Wert der Variablen verwenden, um die notwendigen Berechnungen durchzuführen. Hier ist zum Beispiel ein leicht erweitertes Beispiel für anzahl_der_schuhe.Wie bereits erwähnt, kannst du eine Variable als eine beschriftete Kiste betrachten, die du etwas hineinlegen kannst. Das bedeutet, dass du immer den alten Wert “wegwerfen” und etwas Neues hineinlegen kannst. Im Falle von Variablen geschieht der “Wegwerf”-Teil automatisch, da ein neuer Wert den alten überschreibt. Überprüfe selbst, welcher der endgültige Wert der Variable im unten stehenden Code ist?Mache Übung #1.Beachte, dass eine Variable (eine “Kiste mit Namensschild”) erst existiert, nachdem du ihr etwas zugewiesen hast. Der folgende Code erzeugt also einen NameError, die Python-art zu sagen, dass sie noch nie von der Variable anzahl_der_haende gehört hat.Du kannst jedoch eine Variable erstellen, die keinen spezifischen Wert hat, indem du ihr None zuweist. None wurde speziell für die Bedeutung kein Wert oder nichts zur Sprache hinzugefügt.Wie du bereits gesehen hast, kannst du einen Wert berechnen, anstatt ihn anzugeben. wäre die Antwort hier?Mache Übung #2.","code":"anzahl_der_beine = 2<variablen-name> = <wert># SCHLECHT: Warum 1? Ist es, weil der Character zwei Beine hat oder\n# weil wir jedem Character ein Paar Schuhe geben, unabhängig von\n# seiner tatsächlichen Anzahl von Beinen?\npaar_schuhe = 1\n\n# BESSER (aber was, wenn unser Charakter nur ein Bein hat?)\npaar_schuhe = anzahl_der_beine / 2anzahl_der_beine = 2\n\n# ...\n# etwas passiert und unser Charakter wird in einen Tintenfisch verwandelt\nanzahl_der_beine = 8\n# ...\n\n# der gleiche Code funktioniert immer noch und wir können immer noch die richtige Anzahl an Schuhpaaren berechnen\npaar_schuhe = anzahl_der_beine / 2anzahl_der_beine = 2\nanzahl_der_beine = 5\nanzahl_der_beine = 1\nanzahl_der_beineanzahl_der_beine = 2\nanzahl_der_handschuhe = anzahl_der_haende / 2anzahl_der_haende = None # Die Variable existiert jetzt, hat aber keinen speziellen Wert.anzahl_der_beine = 2 * 2\nanzahl_der_beine = 7 - 2\nanzahl_der_beine"},{"path":"python-grundlagen.html","id":"zuweisungen-sind-keine-gleichungen","chapter":"Kapitel 4 Python Grundlagen","heading":"4.3 Zuweisungen sind keine Gleichungen!","text":"Sehr wichtig: obwohl Zuweisungen wie mathematische Gleichungen aussehen, sind sie keine Gleichungen! Sie folgen einer sehr wichtigen Regel, die Sie im Kopf behalten müssen, wenn Sie Zuweisungen verstehen: die rechte Seite eines Ausdrucks wird zuerst ausgewertet, bis der Endwert berechnet ist. Erst dann wird dieser Endwert der auf der linken Seite angegebenen Variable zugewiesen (also die Kiste gelegt). Das bedeutet, dass Sie die gleiche Variable auf beiden Seiten verwenden können! Sehen wir uns diesen Code :passiert, wenn der Computer die letzte Zeile auswertet? Zunächst nimmt er die aktuellen Werte aller Variablen (2 für x und 5 für y) und setzt sie den Ausdruck. Nach diesem internen Schritt sieht der Ausdruck aus:Dann berechnet er den Ausdruck auf der rechten Seite und speichert, sobald die Berechnung abgeschlossen ist, diesen neuen Wert xMachen Sie die Übung #3, um sicherzugehen, dass Sie dies verstanden haben.","code":"x = 2\ny = 5\nx = x + y - 4x = 2 + 5 - 4x = 3"},{"path":"python-grundlagen.html","id":"constants","chapter":"Kapitel 4 Python Grundlagen","heading":"4.4 Konstanten","text":"Obwohl die eigentliche Stärke von Variablen darin besteht, dass Sie ihren Wert ändern können, sollten Sie sie auch dann verwenden, wenn der Wert im gesamten Programm konstant bleibt. Python gibt es keine echten Konstanten, sondern die Übereinkunft, dass ihre Namen vollständig GROSSGESCHRIEBEN sein sollten. Entsprechend wissen Sie, wenn Sie SOLCH_EINE_VARIABLE sehen, dass Sie ihren Wert nicht ändern sollten. Technisch gesehen ist das nur eine Empfehlung, denn niemand kann Sie davon abhalten, den Wert einer KONSTANTE zu ändern. Aber ein großer Teil der Benutzerfreundlichkeit von Python resultiert aus solchen Übereinkünften (wie der snake_case Konvention oben). Wir werden später mehr von solchen Übereinkünften treffen, zum Beispiel beim Lernen über Objekte.Unter Berücksichtigung dessen, wenn die Anzahl der Beine im Spiel konstant bleibt, sollten Sie diese Konstanz betonen und schreibenIch empfehle dringend die Verwendung von Konstanten und vermeide das Hardcoding von Werten. Erstens, wenn Sie mehrere identische Werte haben, die verschiedene Dinge bedeuten (2 Beine, 2 Augen, 2 Ohren, 2 Fahrzeuge pro Figur, etc.), wird Ihnen eine 2 im Code nicht verraten, diese 2 bedeutet (die Beine? Die Ohren? Der Punktemultiplikator?). Sie können das natürlich herausfinden, basierend auf dem Code, der diese Nummer verwendet, aber Sie könnten sich diese zusätzliche Mühe ersparen und stattdessen eine ordnungsgemäß benannte Konstante verwenden. Dann lesen Sie einfach ihren Namen und die Bedeutung des Wertes wird offensichtlich, und es ist die Bedeutung und nicht der tatsächliche Wert, der Sie hauptsächlich interessiert. Zweitens, wenn Sie entscheiden, diesen Wert dauerhaft zu ändern (sagen wir, unsere Hauptfigur ist jetzt ein Dreifuß), bedeutet die Verwendung einer Konstante, dass Sie sich nur einer Stelle Sorgen machen müssen, der Rest des Codes bleibt unverändert. Wenn Sie diese Zahl hart codiert haben, erwartet Sie eine aufregende 10 und definitiv lange Suche und Ersetzung im gesamten Code.Machen Sie die Übung #4.","code":"ANZAHL_DER_BEINE = 2"},{"path":"python-grundlagen.html","id":"value-types","chapter":"Kapitel 4 Python Grundlagen","heading":"4.5 Datentypen","text":"Bisher haben wir nur ganzzahlige numerische Werte verwendet (1, 2, 5, 1000…). Obwohl Python viele verschiedene Datentypen unterstützt, konzentrieren wir uns zunächst auf eine kleine Auswahl davon:Ganze Zahlen, die wir bereits verwendet haben, z.B. -1, 100000, 42.Fließkommazahlen, die jeden realen Wert annehmen können, z.B. 42.0, 3.14159265359, 2.71828.Zeichenketten, die Text speichern können. Der Text ist zwischen entweder gepaarten Anführungszeichen \"einiger Text\" oder Apostrophen 'einiger Text' eingeschlossen. Das bedeutet, dass Sie Anführungszeichen oder Apostrophe innerhalb der Zeichenkette verwenden können, solange sie von der Alternative umschlossen ist. Z.B., \"Schüleraufgaben\" (eingeschlossen \", Apostroph ' innen) oder '\"Alle Verallgemeinerungen sind falsch, auch diese.\" Mark Twain' (Zitat von Apostrophen eingeschlossen). Es gibt noch viel mehr zu Zeichenketten und wir werden dieses Material im Laufe des Kurses behandeln.Logische / boolesche Werte, die entweder True oder False sind.Bei der Verwendung einer Variable ist es wichtig, dass Sie wissen, welchen Datentyp sie speichert, und das liegt meist bei Ihnen. einigen Fällen wird Python einen Fehler ausgeben, wenn Sie versuchen, eine Rechnung mit inkompatiblen Datentypen durchzuführen. anderen Fällen wird Python Werte automatisch zwischen bestimmten Typen konvertieren, z.B. ist jeder Ganzzahlwert auch ein Realwert, dass die Konvertierung von 1 zu 1.0 meist trivial und automatisch ist. anderen Fällen müssen Sie jedoch möglicherweise eine explizite Konvertierung verwenden. Gehen Sie zur Übung #5 und versuchen Sie zu erraten, welcher Code laufen wird und welcher einen Fehler wegen inkompatiblen Typen werfen wird?Mache Übung #5.Überrascht vom letzten? Das liegt daran, dass intern True auch 1 und False 0 ist!Sie können explizit von einem Typ einen anderen umwandeln, indem Sie spezielle Funktionen verwenden. Beispielsweise können Sie eine Zahl oder einen logischen Wert einen String umwandeln, indem Sie einfach str(<value>) schreiben. wäre das Ergebnis den untenstehenden Beispielen?Mache Übung #6.Ähnlich können Sie mit der Funktion bool(<value>) eine logische/boolesche Variable umwandeln. Die Regeln sind einfach, für numerische Werte ist 0 gleich False, jeder andere Nicht-Null-Wert wird True umgewandelt. Für Zeichenketten wird eine leere Zeichenkette '' als False bewertet und eine nicht leere Zeichenkette wird True umgewandelt. wäre die Ausgabe den untenstehenden Beispielen?Mache Übung #7.Die Umwandlung Ganzzahlen oder Fließkommazahlen mit int(<value>) bzw. float(<value>) ist komplizierter. Der einfachste Fall ist von logisch auf Ganzzahl/Fließkommazahl, da True Ihnen int(True) ist 1 und float(True) ist 1.0 gibt und False gibt Ihnen 0/0.0. Beim Umwandeln von Fließkommazahl auf Ganzzahl lässt Python einfach den Bruchteilteil fallen (es rundet nicht richtig!). Bei der Umwandlung einer Zeichenkette muss es sich um eine gültige Zahl des entsprechenden Typs handeln, sonst wird ein Fehler erzeugt. Sie können z. B. eine Zeichenkette wie \"123\" eine Ganzzahl oder eine Fließkommazahl umwandeln, aber das funktioniert nicht für \"a123\". Darüber hinaus können Sie \"123.4\" eine Fließkommazahl umwandeln, aber nicht eine Ganzzahl, da sie einen Bruchteil enthält. Angesichts dessen, welche Zellen würden funktionieren und welche Ausgabe würden sie erzeugen?Mache Übung #8.","code":"5 + 2.0\n'5' + 2\n'5' + '2'\n'5' + True\n5 + Truestr(10 / 2)\nstr(2.5 + True)\nstr(True)bool(-10)\nbool(0.0)\n\nsecret_message = ''\nbool(secret_message)\n\nbool('False')float(False)\nint(-3.3)\nfloat(\"67.8\")\nint(\"123+3\")"},{"path":"python-grundlagen.html","id":"print","chapter":"Kapitel 4 Python Grundlagen","heading":"4.6 Ausgabe drucken","text":"Um den Wert auszudrucken, müssen Sie die Funktion print() verwenden (wir werden später allgemein über Funktionen sprechen). Im einfachsten Fall übergeben Sie den Wert und er wird ausgegeben.oderNatürlich wissen Sie bereits über die Variablen Bescheid, also statt den Wert direkt einzugeben, können Sie stattdessen eine Variable übergeben und ihr Wert wird ausgegeben.oderSie können auch mehr als einen Wert/Variablen die Druckfunktion übergeben und alle Werte werden nacheinander gedruckt. Wenn wir dem Benutzer zum Beispiel sagen wollen, ich zum Frühstück hatte, können wir das tunWas wird von dem untenstehenden Code gedruckt?Mache Übung #9.Allerdings möchten Sie wahrscheinlich expliziter sein, wenn Sie die Informationen ausdrucken. Stellen Sie sich zum Beispiel vor, Sie haben diese drei Variablen:Sie könnten natürlich print(mahlzeit, gericht, anzahl) machen, aber es wäre schöner, “Ich hatte 10 Pfannkuchen zum Frühstück” zu drucken, wobei die Fettschrift gedruckten Elemente die eingefügten Variablenwerte wären. Dafür müssen wir die Formatierung von Zeichenketten verwenden. Bitte beachten Sie, dass die Formatierung von Zeichenketten nicht spezifisch für das Drucken ist, Sie können einen neuen Zeichenkettenwert über die Formatierung erstellen und ihn einer Variable speichern, ohne ihn auszudrucken, oder ihn ausdrucken, ohne ihn zu speichern.","code":"print(5)\n#> 5print(\"fünf\")\n#> fünfanzahl_der_pfannkuchen = 10\nprint(anzahl_der_pfannkuchen)\n#> 10frühstück = \"pfannkuchen\"\nprint(frühstück)\n#> pfannkuchenfrühstück = \"pfannkuchen\"\nanzahl_der_artikel = 10\nprint(frühstück, anzahl_der_artikel)\n#> pfannkuchen 10abendessen = \"steak\"\nzähler = 4\nnachtisch = \"muffins\"\n\nprint(zähler, abendessen, zähler, nachtisch)mahlzeit = \"Frühstück\"\ngericht = \"Pfannkuchen\"\nanzahl = 10"},{"path":"python-grundlagen.html","id":"string-formatting","chapter":"Kapitel 4 Python Grundlagen","heading":"4.7 Formatierung von Zeichenketten","text":"Eine großartige Ressource zur Formatierung von Zeichenketten Python ist pyformat.info. Da sich Python ständig weiterentwickelt, gibt es nun mehr als eine Art, Zeichenketten zu formatieren. Im Folgenden werde ich das “alte” Format vorstellen, das auf der klassischen Formatierung von Zeichenketten basiert, die der Funktion sprintf C, Matlab, R und vielen anderen Programmiersprachen verwendet wird. Es ist etwas weniger flexibel als neuere, aber für einfache Aufgaben ist der Unterschied vernachlässigbar. Das Wissen über das alte Format ist nützlich wegen seiner Allgemeinheit. Wenn Sie Alternativen lernen möchten, lesen Sie unter dem oben angegebenen Link.Der allgemeine Aufruf lautet \"ein String mit Formatierung\"%(Tupel von Werten, die während der Formatierung verwendet werden). Sie werden später mehr über Tupel lernen. Gehen Sie im Moment davon aus, dass es sich einfach um eine durch Kommas getrennte Liste von Werten handelt, die runden Klammern eingeschlossen sind: (1, 2, 3).\"ein String mit Formatierung\", geben Sie , wo Sie den Wert mit dem Zeichen % einfügen möchten, das von einer optionalen Formatierungsinformation und dem erforderlichen Symbol, das den Typ des Wertes definiert, gefolgt wird. Die Typsymbole sinds für Zeichenketted für eine Ganzzahlf für einen Fließkommawertg für einen “optimal” gedruckten Fließkommawert, dass für große Werte die wissenschaftliche Notation verwendet wird (z.B., 10e5 statt 100000).Hier ist ein Beispiel, wie man einen String mit einer Ganzzahl formatiert:Sie sind nicht darauf beschränkt, einen einzigen Wert einen String einzufügen. Sie können weitere Positionen über % angeben, müssen jedoch sicherstellen, dass Sie die richtige Anzahl von Werten der richtigen Reihenfolge übergeben. Können Sie vor dem Ausführen herausfinden, welcher Aufruf tatsächlich funktioniert (und die Ausgabe sein wird) und welcher einen Fehler verursacht?Machen Sie Übung #10.Wie oben erwähnt, haben Sie im Falle von echten Werten zwei Möglichkeiten: %f und %g. Letzterer verwendet die wissenschaftliche Notation (z.B. 1e10 für 10000000000), um eine Darstellung kompakter zu machen.Machen Sie Übung #11, um ein besseres Gefühl für den Unterschied zu bekommen.Es gibt noch viel mehr zur Formatierung und Sie können auf pyformat.info darüber lesen. Diese Grundlagen sind jedoch ausreichend, um dem nächsten Kapitel mit der Programmierung unseres ersten Spiels zu beginnen.","code":"print(\"Ich hatte %d Pfannkuchen zum Frühstück\"%(10))\n#> Ich hatte 10 Pfannkuchen zum Frühstückprint('Ich hatte %d Pfannkuchen und entweder %d oder %d Steaks zum Abendessen'%(2))\nprint('Ich hatte %d Pfannkuchen und %d Steaks zum Abendessen'%(7, 10))\nprint('Ich hatte %d Pfannkuchen und %d Steaks zum Abendessen'%(1, 7, 10))"},{"path":"guess-the-number-single-round.html","id":"guess-the-number-single-round","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","text":"Das vorherige Kapitel deckte die Grundlagen von Python ab, sodass Du nun bereit bist, Dein erstes Spiel zu entwickeln! Wir werden es Schritt für Schritt aufbauen, da es viel zu lernen gibt über Eingaben, Bibliotheken, bedingte Aussagen und Einrückungen.Bevor Du anfängst, erstelle einen neuen Ordner (innerhalb Deines Kursordners), benenne ihn zum Beispiel “guess--number”, lade das Übungsnotizbuch herunter, kopiere es den neu erstellten Ordner und öffne es Jupyter Notebook. Wie im vorherigen Kapitel wird es Übungen zum Lesen und Verstehen des Codes enthalten.Wir werden jedoch VS Code verwenden, um Skripte mit dem eigentlichen Spiel zu programmieren. Du musst für jede Code-Praxis eine separate Datei erstellen11 (z.B., code01.py12, code02.py, etc.) Dies ist nicht die effizienteste Implementierung einer Versionskontrolle und wird sicherlich den Ordner überladen. Aber es würde mir ermöglichen, Deine Lösungen für jeden Schritt zu sehen, es mir leichter machen würde, Feedback zu geben. Zum Einreichen der Aufgabe, zippe einfach den Ordner und reiche die Zip-Datei ein.","code":""},{"path":"guess-the-number-single-round.html","id":"konzepte-des-kapitels-1","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.1 Konzepte des Kapitels","text":"Dokumentation des Codes.Debuggen von Code.Eingabe einer Eingabe von einem Benutzer.Verwendung von Vergleichen bedingten Aussagen.Verwendung von Einrückungen, um Aussagen zu gruppieren.Verwendung von Python Bibliotheken.Generieren von Zufallszahlen.","code":""},{"path":"guess-the-number-single-round.html","id":"das-spiel","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.2 Das Spiel","text":"Wir werden ein Spiel programmieren, bei dem ein Teilnehmer (Computer) eine Zahl innerhalb eines bestimmten Bereichs auswählt (sagen wir, zwischen 1 und 10) und der andere Teilnehmer (menschlicher Spieler) versucht, diese zu erraten. Nach jedem Versuch des Menschen antwortet der Computer, ob die tatsächliche Zahl niedriger als die Vermutung ist, höher als die Vermutung ist oder mit ihr übereinstimmt. Das Spiel ist vorbei, wenn der Spieler die Zahl richtig errät oder (der späteren Version des Spiels) keine Versuche mehr hat.Unsere erste Version wird nur einen Versuch zulassen und der Gesamtspielalgorithmus wird folgendermaßen aussehen:der Computer generiert eine Zufallszahl zwischen 1 und 10druckt sie aus für Debugging-Zweckefordert den Benutzer auf, eine Vermutung einzugebenvergleicht die beiden Zahlen und gibt das Ergebnis aus: “Meine Zahl ist niedriger”, “Meine Zahl ist höher” oder “Genau richtig!”","code":""},{"path":"guess-the-number-single-round.html","id":"lass-uns-eine-zahl-auswählen","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.3 Lass uns eine Zahl auswählen","text":"Beginnen wir damit, nur die ersten zwei Schritte des Programms zu implementieren. Erstelle zuerst eine Variable, die eine Zahl enthält, die der Computer “ausgesucht” hat. Wir nennen sie number_picked (Du kannst auch einen anderen aussagekräftigen Namen verwenden, aber es könnte einfacher sein, wenn wir alle den gleichen Namen verwenden). Um die Dinge Anfang einfacher zu machen, codieren wir eine beliebige Zahl zwischen 1 und 10 hart (wähle die, die Dir gefällt). Dann lass uns diese ausdrucken, dass wir die Zahl selbst kennen13. Verwende die Zeichenkettenformatierung, um die Dinge benutzerfreundlich zu gestalten, z. B. drucke etwas aus wie “Die Zahl, die ich ausgewählt habe, ist …”. Du solltest der Lage sein, dies mit dem Wissen aus dem vorherigen Kapitel zu tun. Dein Code sollte aus zwei Zeilen bestehen:Probiere diesen Zweizeiler einem Jupyter Notebook aus (erstelle ein leeres Notebook nur dafür). Wenn Du damit zufrieden bist, kopiere-den Code code01.py und lies weiter, um zu erfahren, wie Du es dokumentieren und ausführen kannst.Füge Deinen Code code01.py ein.","code":"# 1. erstelle Variable und setze ihren Wert\n# 2. gebe den Wert aus"},{"path":"guess-the-number-single-round.html","id":"dokumentiere-deinen-code-1","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.4 Dokumentiere Deinen Code","text":"Jetzt, wo Du Deine erste Datei mit einem Python-Programm hast, solltest Du es dokumentieren. Die Dokumentation eines zwei Zeilen langen und einfachen Programms mag albern erscheinen, aber es sollte etwas Automatisches sein. Später wirst Du mehrere Zeilen Kommentare verwenden, um eine einzelne Zeilenfunktion zu dokumentieren. Noch einmal, es geht nicht um den Code, der funktioniert, es geht um den Code, den Du verstehen kannst. gewisser Weise ist es besser, ein sauberes, gut dokumentiertes Programm zu haben, das momentan nicht korrekt funktioniert, als einen undokumentierten Spaghetti-Code, der funktioniert. Du kannst das Erstere korrigieren und aktualisieren, das Letztere zu warten oder zu aktualisieren…Python hast Du zwei Möglichkeiten, Kommentare zu schreiben: mehrzeilig und einzeiligVerwende mehrzeilige Kommentare, um die Dokumentation für einzelne Dateien, Funktionen, Klassen, Methoden usw. zu schreiben. Du wirst lernen, wie Du diese Dokumentation im Numpy-Docstring-Stil formatierst, sobald Du Funktionen kennst. unserem Fall solltest Du Deine code01.py-Datei mit einem mehrzeiligen Kommentar beginnen, der kurz beschreibt, welches Programm sie enthält. Mindestens solltest Du schreiben, dass dies ein Guess Number-Spiel ist. Wahrscheinlich ist es eine gute Idee, zu skizzieren, worum es dem Spiel geht.Verwende einzeilige Kommentare, um zu erklären, einem bestimmten Codeblock passiert. Du musst nicht jede Zeile kommentieren und Du solltest den Code nicht menschlicher Sprache replizieren. Ein Kommentar sollte darüber sein, passiert, nicht wie. Du hast bereits einen Block Code, also dokumentiere ihn mit einem einzelnen Satz.Dokumentiere die code01.py.","code":"'''Ein \nmehrzeiliger \nKommentar\n'''\n\n#  Ein einzeiliger Kommentar."},{"path":"guess-the-number-single-round.html","id":"debugging","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.5 Ausführen und Debuggen deines Spiels in VS Code","text":"Jetzt, da wir ein zwei Zeilen langes Programm haben, können wir es ausführen und schon anfangen zu lernen, wie man es debuggt. Ja, unser aktuelles Programm ist wahrscheinlich zu einfach, um ein tatsächliches Debugging zu benötigen, aber es ist auch einfach genug, um das Verständnis des Debuggings zu erleichtern. Und das Debuggen ist eine entscheidende Fähigkeit, die ein laufendes Programm von einer Blackbox etwas transparentes und leichtes14 zu verstehen verwandelt. Weiter unten werde ich beschreiben, wie man VS Code debuggt, aber du könntest ein offizielles Handbuch zu Rate ziehen, falls sich der Zwischenzeit etwas geändert hat.Es gibt zwei Möglichkeiten, ein Python-Programm VS Code auszuführen. Zuerst kannst Du den “Run Python File Terminal” Abspielknopf auf der rechten Seite verwenden. Dies führt dein Programm ohne Debugger aus, dass Du es nur für die tatsächlichen Läufe des finalisierten Codes verwenden solltest. Trotzdem kannst Du versuchen, es auszuführen und zu sehen, ob es das ausgibt, es sollte.\nDie Alternative ist der Debugging-Reiter, der eine kleine Wanze auf dem Run-Knopf hat. Wenn Du ihn auswählst, wird “Run Debug” angezeigt. Klicke auf den Knopf und es werden verschiedene Optionen für verschiedene Arten von Python-Projekten und -Frameworks angeboten. Für unsere Absichten und Zwecke benötigen wir nur “Python File: Debug currently active Python file”. Klicke darauf und es wird Deinen Code ausführen (sollte genau laufen wie mit dem anderen Knopf).Du willst wahrscheinlich nicht die ganze Zeit durch Debugging-Tab → Run Debug-Knopf → Konfiguration auswählen klicken. Ein besserer Weg ist es, es einmal für alle zu konfigurieren und dann die F5-Taste zu verwenden, um Deinen Code auszuführen. Klicke zunächst auf “Erstelle eine launch.json-Datei” und wähle erneut “Python File: Debug currently active Python file” aus. Du wirst sehen, dass eine neue launch.json Datei im Editor erscheint, die aussehen sollte:Das war’s! VS Code hat für Dich eine Konfiguration erstellt. Jetzt kannst Du die launch.json-Datei schließen und Dein Programm durch einfaches Drücken der F5-Taste ausführen. Versuch es! Wieder einmal sollte es genauso funktionieren wie zuvor, aber warum sind wir dann durch diese Mühe gegangen? Weil der Debugger die Ausführung Deines Codes pausiert, wann immer er auf ein Problem trifft und Dir die Chance gibt, Variablen zu untersuchen, Code-Snippets auszuführen usw. Im Gegensatz dazu wird das Ausführen der Python-Datei im Terminal (die erste Option) nur eine Fehlermeldung ausgeben und das Programm beenden. Außerdem kannst Du Breakpoints verwenden, um das Programm jeder Zeile anzuhalten, Dir die Möglichkeit gibt, Deinen Code jeder Stelle, die Du benötigst, zu untersuchen.Du aktivierst Breakpoints, indem Du links von der Zeilennummer, die Dich interessiert, klickst. Hier habe ich auf Zeile 6 geklickt und Du kannst einen roten Punkt sehen, der einen aktiven Breakpoint anzeigtWenn ich jetzt den Code über F5 ausführe, hält das Programm dieser Zeile bevor es sie ausführt.Das gibt mir die Möglichkeit zu sehen, welchen Wert meine Variable number_picked hat. Sie ist bereits den lokalen Variablen aufgeführt (oben links). Aber ich habe sie auch zur Liste der beobachteten Variablen (Watch, links der Mitte) hinzugefügt und mir ihren Wert der Debug Console (unten) angesehen, die es mir ermöglicht, beliebigen Python-Code auszuführen, während mein Programm angehalten ist. Mach das Gleiche und erkunde selbst diese unterschiedlichen Möglichkeiten. Sieh zum Beispiel, wie du number_picked + 1 oder number_picked * number_picked im Watch Tab und der Debug Console berechnen kannst.Sobald du fertig bist, den aktuellen Zustand des Programms zu untersuchen, hast du sechs Buttons oben zur Verfügung, um zu entscheiden, als nächstes zu tun ist (fahre mit der Maus darüber, um Hinweise zu sehen). Sie sind, von links nach rechtsFortfahren (F5): Setze das Programm fort.Step (F10): Führt den Code aus, ohne Funktionen zu gehen (diese und die beiden folgenden Optionen werden klarer, sobald du lernst, Funktionen zu schreiben).den Code hineinsteigen (F11)Aus dem Code heraussteigen (Shift+F11).Das Programm neu starten (Ctrl+Shift+F5).Das Programm stoppen (Shift+F5).Um besser zu verstehen, wie das funktioniert, stoppe das Programm (Shift+F5) und setze einen zusätzlichen Haltepunkt die erste Zeile deines Codes (Zeile #5 meinem Programm, die anderen Zeilen sind Kommentare oder leer). Führe das Programm wieder über F5 aus und es wird dieser ersten Zeile pausieren. Kannst du jetzt den Wert der Variable number_picked ermitteln?Die Antwort lautet “nein”, weil diese Variable noch nicht existiert. Denke daran, das Programm pausiert vor dem Ausführen der Zeile. Benutze F10, um Schritt für Schritt durch den Code zu gehen und zu sehen, wie die Variable erscheint und die Information ausgegeben wird.Diese Debugging-Übung war vielleicht nicht notwendig, um Probleme mit deinem aktuellen Code zu lösen, aber sie hat gezeigt, wie das der Zukunft funktioniert. Zögere nicht, einen Haltepunkt zu setzen, um das Programm zu pausieren und zu überprüfen, ob die Realität (d.h. die tatsächlichen Werte der Variablen) deinen Erwartungen entspricht. Nutze das Durchlaufen des Codes, um die Dinge zu verlangsamen und zu beobachten und zu überlegen.","code":""},{"path":"guess-the-number-single-round.html","id":"input-function","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.6 Einen Spieler nach einer Vermutung fragen","text":"Um das Spiel Guess Number zu spielen, braucht es zwei. Der Computer hat seinen Teil erledigt, indem er eine Zahl ausgewählt hat, jetzt müssen wir einen Spieler bitten, seine Vermutung einzugeben. Dafür verwenden wir die input() Funktion.Eine Funktion ist ein isolierter Code, der (optionale) Eingaben akzeptiert, eine Aktion ausführt und optional einen Wert (Ausgabe) zurückgibt. Dies ermöglicht einerseits, den Code kleinere Blöcke zu unterteilen, die einfacher zu warten sind und andererseits, den gleichen Code wiederzuverwenden. Du hast bereits die print() Funktion verwendet, um Dinge auszudrucken, und die str(), bool(), int() und float() Funktionen, um Werte zu konvertieren. Bei der print() Funktion ist die Eingabe eine beliebige Anzahl von Werten (sogar keine, probiere das Jupiter Notebook aus!), ihre Aktion ist es, Dinge auszudrucken, aber sie gibt nichts zurück (keine Ausgabe). Die float() Funktion nimmt (etwas überraschend) null oder einen Wert als Eingabe (versuche, ihr keinen oder mehr als einen Jupiter Notebook zu geben und sieh den Unterschied), versucht, den gegebenen Wert float zu konvertieren (wirft einen Fehler, wenn sie das nicht kann), und gibt einen float-Wert als Ausgabe zurück.Ein ähnliches Eingabe → Aktion → Ausgabe Schema gilt für die input(prompt) Funktion. Sie akzeptiert optional einen prompt String als Eingabe. Dann druckt sie die prompt Nachricht aus und wartet darauf, dass ein Benutzer einen String eingibt, bis dieser Enter drückt. Dann gibt sie diesen String-Wert zurück. Dieser letzte Punkt über den String ist wichtig, denn unserem Spiel müssen die Spieler eine ganze Zahl und keinen String eingeben. Gehen wir für einen Moment davon aus, dass die Eingabe immer eine gültige Ganzzahl ist, also gib nur gültige Ganzzahlen ein, wenn du das Programm testest! Auf diese Weise können wir sie ohne zusätzliche Prüfungen (die wir der Zukunft hinzufügen werden) eine Ganzzahl umwandeln und dieser Wert einer neuen Variable namens guess zuweisen. Du musst also eine einzelne Zuweisungsanweisung mit der guess Variablen auf der linken Seite und dem Aufruf der input() Funktion auf der rechten Seite hinzufügen (denke eine schöne Aufforderungsnachricht), eingehüllt (innerhalb) der Typumwandlung eine Ganzzahl über int(). Teste diesen Code, aber gib wieder nur gültige Ganzzahlen ein, damit die Umwandlung ohne Fehler funktioniert.Aktualisiere deine code01.py","code":""},{"path":"guess-the-number-single-round.html","id":"if-statement","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.7 Bedingte if-Anweisung","text":"Jetzt haben wir zwei Zahlen: Eine, die der Computer ausgewählt hat (number_picked), und eine, die der Spieler eingegeben hat (guess). Wir müssen sie vergleichen, um die korrekte Ausgabemeldung zu liefern. Dafür verwenden wir die bedingte -Anweisung:Nur der -Teil ist erforderlich, während elif (kurz für “else, ”) und else optional sind. kannst du etwas tun, nur wenn eine Bedingung wahr ist:Bevor wir bedingte Anweisungen unserem Spiel verwenden können, musst du (1) die Bedingungen selbst und (2) die Verwendung von Einrückungen als Mittel zur Gruppierung von Anweisungen verstehen.","code":"if eine_Bedingung_ist_wahr:\n    # Tu etwas\nelif eine_andere_Bedingung_ist_wahr:\n    # Tu etwas anderes\nelif noch_eine_andere_Bedingung_ist_wahr:\n    # Tu noch etwas anderes\nelse:\n    # Tu etwas nur, wenn alle Bedingungen oben falsch sind.if eine_Bedingung_ist_wahr:\n    # Tu etwas, aber ANSONSTEN TU NICHTS \n    # und fahre mit der Codeausführung fort\n  \n# Einige Codezeilen, die nach der if-Anweisung ausgeführt werden,\n# unabhängig davon, ob die Bedingung wahr war oder nicht."},{"path":"guess-the-number-single-round.html","id":"comparisons","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.8 Bedingungen und Vergleiche","text":"Eine Bedingung ist jeder Ausdruck, der überprüft werden kann, um zu sehen, ob er True oder False ist. Ein einfaches Beispiel für einen solchen Ausdruck sind Vergleiche, die menschlicher Sprache ausgedrückt werden als: Ist heute Donnerstag? Ist die Antwort (gleich) 42? Regnet es und habe ich einen Regenschirm? Wir werden uns für einen Moment auf solche Vergleiche konzentrieren, aber später wirst Du sehen, dass Python jeder Ausdruck entweder True oder False ist, auch wenn er nicht wie ein Vergleich aussieht15.Für den Vergleich kannst Du die folgenden Operatoren verwenden:“ist gleich B” wird geschrieben als == B.“ist nicht gleich B” wird geschrieben als != B.“ist größer als B” und “ist kleiner als B” sind entsprechend > B und < B.“ist größer als oder gleich B” und “ist kleiner als oder gleich B” sind entsprechend >= B und <= B (bitte beachte die Reihenfolge der Symbole, da => und =< einen Fehler erzeugen werden).Löse einige Vergleiche Übung #1.Beachte, dass Python auch einen Operator hat, der identisch mit == aussehen kann (z.B. sieht x == 2 äquivalent zu x 2 aus). Darüber hinaus funktioniert er einigen Fällen auch auf die gleiche Weise. Es gibt jedoch einen subtilen Unterschied: == überprüft, ob Werte identisch sind, während überprüft, ob Objekte (die “Werte halten”) identisch sind. Du musst Klassen und Objekte verstehen, bevor Du diesen Unterschied schätzen kannst, also behalte vorerst im Hinterkopf, dass Du nur == verwenden solltest (ich werde explizit erwähnen, wann benötigt wird).Du kannst den logischen Wert mit dem Operator invertieren, da True False und False True ist. Das bedeutet, dass != B dasselbe ist wie == B und entsprechend ist == B != B. Um zu sehen, wie das funktioniert, betrachte beide Fälle, wenn tatsächlich gleich B ist und wenn es nicht ist.Wenn gleich B ist, dann ergibt == B True. Das != B ist dann False, also != B → False → True.Wenn nicht gleich B ist, dann ergibt == B False. Das != B ist dann True, also != B → True → False.Überprüfe diese Inversion selbst Übung #2.Du kannst auch mehrere Vergleiche mit den Operatoren und/oder16 kombinieren. Wie der menschlichen Sprache bedeutet , dass beide Teile wahr sein müssen: True True → True, aber True False → False, False True → False, und False False → False. Dasselbe gilt, wenn Du mehr als zwei Bedingungen/Vergleiche über verknüpfst: Alle müssen wahr sein. Im Fall von muss nur eine der Aussagen wahr sein, z.B. True True → True, True False → True, False True → True, aber False False → False. Auch hier gilt für mehr als zwei Vergleiche/Bedingungen, dass mindestens eine von ihnen wahr sein sollte, damit der gesamte Ausdruck wahr ist.Mache die Übungen #3 und #4.Ein subtiler, aber wichtiger Punkt: Bedingungen werden von links nach rechts ausgewertet, bis der gesamte Ausdruck auf die eine oder andere Weise aufgelöst ist. Das bedeutet, dass wenn der erste Ausdruck einem False ist, der zweite (der Rest von ihnen) nie ausgewertet wird. D.h., wenn sowohl erster als auch zweiter Ausdruck True sein müssen und Du weißt, dass erster Ausdruck bereits False ist, ist der gesamte Ausdruck jedem Fall False. Das bedeutet, dass es im folgenden Code keinen Fehler geben wird, obwohl die Auswertung von int(\"e123\") allein einen ValueError auslösen würde.Umkehrst Du jedoch die Reihenfolge, dass int(\"e123\") == 123 zuerst ausgewertet werden muss, erhältst Du eine FehlermeldungÄhnlich verhält es sich, wenn bei irgendein Ausdruck True ist, musst Du den Rest nicht überprüfen.Ist die erste Bedingung jedoch False, müssen wir fortfahren (und stolpern dabei über einen Fehler):Mache Übung #5.Schließlich kannst Du, wie der einfachen Arithmetik, Klammern () verwenden, um Bedingungen zu gruppieren. kann die Aussage “Ich esse immer Schokolade, aber ich esse Spinat nur, wenn ich hungrig bin” wie folgt geschrieben werden: food == \"chocolate\" (food == \"spinach\" hungry). Hier werden food == \"chocolate\" und food == \"spinach\" hungry unabhängig voneinander ausgewertet, ihre Werte werden ihrer Stelle eingesetzt und dann wird die -Bedingung ausgewertet.Mache Übung #6.Ein letzter Gedanke zu Vergleichen: Zögere nicht, sie Jupyter Notebook mit verschiedenen Kombinationen von Werten zu testen oder das Programm der Bedingung über einen Haltepunkt anzuhalten und einen Vergleich Watch oder Debug Console auszuwerten.","code":"2 * 2 == 5 and int(\"e123\") == 123\n#> Falseint(\"e123\") == 123 and 2 * 2 == 4\n#> invalid literal for int() with base 10: 'e123'2 * 2 == 4 or int(\"e123\") == 123\n#> True2 * 2 == 5 or int(\"e123\") == 123\n#> invalid literal for int() with base 10: 'e123'"},{"path":"guess-the-number-single-round.html","id":"indentation","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.9 Gruppieren von Anweisungen über Einrückungen","text":"Lass uns zu einer bedingten -Anweisung zurückkehren. Sieh dir das folgende Codebeispiel (und beachte ein : Ende von some_condition_is_true:), dem Anweisung #1 nur ausgeführt wird, wenn eine Bedingung wahr ist, während Anweisung #2 danach ausgeführt wird, unabhängig von der Bedingung.Beide Aussagen #1 und #2 folgen nach der -Anweisung. Aber wie erkennt Python, dass die erste nur ausgeführt wird, wenn die Bedingung wahr ist, und die andere immer ausgeführt wird? Die Antwort ist Einrückung: Die 4 (vier!) Leerzeichen, die automatisch hinzugefügt werden, wenn du VS Code auf Tab drückst und entfernt werden, wenn du auf Shift+Tab drückst. Die Einrückung platziert Anweisung #1 innerhalb der -Anweisung. Daher zeigt die Einrückung , ob Anweisungen zur gleichen Gruppe gehören und nacheinander ausgeführt werden müssen (gleiche Einrückungsebene für und Anweisung #2) oder sich innerhalb einer bedingten Anweisung, Schleife, Funktion, Klasse usw. befinden (Anweisung #1). Für komplexeren Code, der zum Beispiel eine -Anweisung innerhalb einer -Anweisung innerhalb einer Schleife haben wird, drückst du dies aus, indem du weitere Ebenen der Einrückung hinzufügst. Zum Beispiel:Achte sehr genau auf die Einrückung, denn sie bestimmt, welche Anweisungen zusammen ausgeführt werden! Ein falscher Einrückungsgrad ist leider ein sehr häufiger Fehler.Mache Übung #7.Die und ifelse Anweisungen werden lange ausgewertet, bis eine von ihnen sich als True herausstellt. Danach werden alle folgenden ifelse und else Anweisungen einfach ignoriert.Mache Übung #8.","code":"if some_condition_is_true:\n    Anweisung #1\nAnweisung #2 # einige Anweisungen außerhalb der Schleife (0 Einrückung)\nwhile Spiel_ist_nicht_vorbei: # (0 Einrückung)\n    # Anweisungen innerhalb der Schleife\n    if Taste_gedrückt: # (Einrückung von 4)\n        # innerhalb der Schleife und if-Anweisung\n        if Taste == \"Space\": # (Einrückung von 8)\n            # innerhalb der Schleife, if-Anweisung und einer weiteren if-Anweisung\n            springen() # (Einrückung von 12)\n        else: # (Einrückung von 4)\n            # innerhalb der Schleife, if-Anweisung und im sonst-Teil einer weiteren if-Anweisung\n            stehen() # (Einrückung von 12)\n\n    # Anweisungen innerhalb der Schleife, aber außerhalb der äußersten if-Anweisung\n    drucke(Taste) # (Einrückung von 4)\n\n# einige Anweisungen außerhalb der Schleife (0 Einrückung)"},{"path":"guess-the-number-single-round.html","id":"überprüfung-der-antwort","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.10 Überprüfung der Antwort","text":"Jetzt hast du alle notwendigen Werkzeuge, um die erste Version unseres Spiels zu beenden. Füge deinem code01.py bedingte Anweisungen hinzu, dasswenn die Computerwahl kleiner als die Vermutung des Spielers ist, druckt es \"Meine Zahl ist niedriger!\"wenn die Computerwahl größer als die Vermutung des Spielers ist, druckt es \"Meine Zahl ist höher!\"wenn die beiden Zahlen identisch sind, druckt es \"Volltreffer!\"Speichere zunächst eine Kopie deines ursprünglichen Codes code02.py und füge dann den Vergleich und das Drucken hinzu.\n::: {.program}\nErweitere dein Programm mit dem Vergleich code02.py\n:::Teste, ob dein Code funktioniert. Nutze wieder Breakpoints, wenn du den Kontrollfluss besser verstehen und überprüfen möchtest, ob die Vergleiche funktionieren, wie du es erwartest.","code":""},{"path":"guess-the-number-single-round.html","id":"using-libraries","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.11 Verwenden von Bibliotheken","text":"Unser Spiel ist “funktionsvollständig”: der Computer wählt eine Zahl, der Spieler macht eine Vermutung, der Computer reagiert entsprechend. Derzeit spielen wir jedoch für beide Seiten. Lass uns den Computer selbst eine zufällige Zahl auswählen. Dafür müssen wir die Funktion randint(, b) verwenden. Sie ist Teil jeder Python-Distribution, dass du sie auch hättest, wenn du eine einfache Python-Distribution installierst, anstatt eine von PsychoPy zu verwenden. Du kannst sie jedoch nicht sofort verwenden, wie du es mit print() oder input() getan hast. Gib randint(1, 3) dein Jupyter Notebook ein und beobachte den NameError: name ‘randint’ defined.Der Grund dafür ist, dass Python unglaublich viele Funktionen hat und das Laden aller gleichzeitig den Speicher mit Dingen verstopfen würde, die du nie zu verwenden beabsichtigt hast. Stattdessen sind sie Bibliotheken verpackt, dass du nur die Funktionen (oder Bibliotheken) importieren kannst, die du tatsächlich für dein Programm benötigst. Du importierst sie über eine import-Anweisung, die den Anfang deiner Datei gehört (aber unter dem Kommentar zum Inhalt der Datei). Es gibt mehrere Möglichkeiten, wie du Bibliotheken importieren kannst. Erstens kannst du eine gesamte Bibliothek importieren (wie zum Beispiel die random Bibliothek, die die Funktion randint() hat, die wir benötigen) und dann ihre Funktionen als <Bibliothek>.<Funktion> verwenden. Für randint wäre dasIch würde dies als bevorzugte Art der Verwendung von Bibliotheken empfehlen, da es dich zwingt, den Namen der Bibliothek explizit zu erwähnen, wenn du eine Funktion aufrufst, d.h. random.randint() statt nur randint(). Dies mag nicht wichtig erscheinen, wenn nur eine Bibliothek importiert wird, aber selbst einem moderat großen Projekt wirst du viele Bibliotheken importieren, dass es schwierig wird herauszufinden, zu welcher Bibliothek die Funktion gehört. Noch wichtiger ist, dass verschiedene Bibliotheken Funktionen mit demselben Namen haben können. diesem Fall stammt die Funktion, die du verwendest, aus der letzten Bibliothek, die du importiert hast. Aber du wirst das vielleicht nicht bemerken und dies ist eine Art von Fehler, der wirklich schwer aufzuspüren ist. Importiere also immer die gesamte Bibliothek und verwende die Bibliothek. Notation, es sei denn, du hast einen sehr guten Grund, etwas anderes zu tun!Eine weitere und weniger explizite Option besteht darin, nur einige Funktionen zu importieren und sie ohne den library. Präfix zu verwenden. Du kannst mehr als eine Funktion importieren, indem du sie alle auflistest.Du kannst auch eine Bibliothek oder eine Funktion beim Importieren über umbenennen. Kurz gesagt, solltest du dies nicht tun, da die Verwendung eines anderen Namens für eine Bibliothek oder eine Funktion es anderen (und sogar dem zukünftigen Du) erschweren würde, deinen Code zu verstehen. Es gibt jedoch einige “standardmäßige” Umbenennungsmuster, die universell verwendet werden und auf die du wahrscheinlich stoßen wirst.Zum Schluss gibt es noch eine sehr schlechte Möglichkeit, Funktionen aus einer Bibliothek zu importieren: random import *. Das Sternchen bedeutet, dass du alle Funktionen aus der Bibliothek importieren möchtest und sie ohne random. Präfix aufrufen möchtest. Tu das niemals, niemals, niemals17! Dadurch wird deine Umgebung mit Funktionen gefüllt, von denen du vielleicht nichts weißt, die möglicherweise andere Funktionen überschreiben, Konflikte verursachen etc. Niemals! Ich zeige dir das nur, weil du irgendwann einen Code sehen wirst, der diesen Ansatz verwendet, und du könntest denken, dass das eine gute Idee ist. Es ist eine schreckliche Idee! Importiere die Bibliothek, nicht die Funktionen, damit du explizit zeigen kannst, auf welche Bibliothek du dich verlässt, wenn du eine Funktion aufrufst. Denke immer den Zen Python: “Explizit ist besser als implizit.”","code":"import random\n\ncomputer_wahl = random.randint(1, 5)from random import randint, randrange\n\ncomputer_wahl = randint(1, 5)# dies ist die übliche Art, diese zwei Bibliotheken zu importieren\nimport numpy as np\nimport pandas as pd\n\nnp.abs(-1)\n\n# du kannst auch einzelne Funktionen umbenennen, wenn du unbedingt musst (aber bitte nicht!)\nfrom random import randint as zufalls_zahl\n\ncomputer_wahl = zufalls_zahl(1, 5)"},{"path":"guess-the-number-single-round.html","id":"eine-zufallszahl-auswählen","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.12 Eine Zufallszahl auswählen","text":"Jetzt wo du weißt, wie man eine Bibliothek importiert, können wir die Funktion randint() verwenden. Speichere dafür eine Kopie deines vorherigen Codes code03.py. Importiere die Bibliothek und verwende randint(), um eine Zufallszahl zwischen 1 und 10 zu generieren. Lese die Dokumentation zu randint(), um zu verstehen, wie man es verwendet. Das Lesen von Handbüchern ist ein notwendiger Teil des Programmierens, also ist dies ein guter Zeitpunkt, um das Üben zu beginnen.Sobald du dies code02.py implementiert hast, führe es mehrmals aus, um zu überprüfen, dass der Computer tatsächlich unterschiedliche Zufallswerte auswählt. Verwende erneut Breakpoints, wenn du genau überprüfen möchtest, passiert.Gib deinen Code code03.py ein.Herzlichen Glückwunsch, du hast gerade dein erstes Computerspiel programmiert! Ja, es ist sehr einfach, aber es hat die Schlüsselzutaten: eine zufällige Entscheidung des Computers, Benutzereingabe und Feedback. Beim nächsten Mal wirst du über Schleifen lernen, um mehrere Versuche zu ermöglichen, und wirst damit beginnen, Funktionen zu schreiben, um deinen Code modular und zuverlässig zu machen. der Zwischenzeit vertiefen wir dein Wissen, indem wir noch ein Spiel programmieren!","code":""},{"path":"guess-the-number-single-round.html","id":"einarmiger-bandit-einzelrundenedition","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.13 Einarmiger Bandit (Einzelrundenedition)","text":"Du weißt alles, du brauchst, um eine einfache Version eines “Einarmigen Banditen”-Spiels zu programmieren. Hier ist die Spiellogik:Importiere die Zufallsbibliothek, damit du die Funktion randint verwenden kannst.Generiere drei zufällige Ganzzahlen (sagen wir, zwischen 1 und 5) und speichere sie drei Variablen slot1, slot2 und slot3.Drucke die Zahlen aus, verwende die String-Formatierung, um sie schön aussehen zu lassen.Zusätzlich,\nwenn alle drei Werte gleich sind, drucke \"Dreierpasch!\".\nWenn nur zwei Zahlen übereinstimmen, drucke \"Paar!\".\nDrucke nichts, wenn alle Zahlen unterschiedlich sind.\nwenn alle drei Werte gleich sind, drucke \"Dreierpasch!\".Wenn nur zwei Zahlen übereinstimmen, drucke \"Paar!\".Drucke nichts, wenn alle Zahlen unterschiedlich sind.Vergiss nicht, die neue Datei code03.py zu dokumentieren und verwende Breakpoints, um sie zu debuggen, wenn du möchtest.Gib deinen Code code04.py ein.","code":""},{"path":"guess-the-number-single-round.html","id":"abgabe-für-das-seminar","chapter":"Kapitel 5 Errate die Zahl: eine einzelne Runden Edition","heading":"5.14 Abgabe für das Seminar","text":"Für das Seminar gib einen gezippten Ordner mit dem Übungs-Notebook und allen vier Programmen ab.","code":""},{"path":"guess-the-number-multi-round.html","id":"guess-the-number-multi-round","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","text":"Im vorherigen Kapitel hast Du ein “Guess Number”-Spiel programmiert, das nur einen einzigen Versuch erlaubt. Jetzt werden wir es erweitern, um mehrere Versuche zu ermöglichen und werden andere Extras hinzufügen, um es noch spannender zu machen. Erstelle einen neuen Unterordner und lade das Übungs-Notebook herunter, bevor wir beginnen!","code":""},{"path":"guess-the-number-multi-round.html","id":"konzepte-des-kapitels-2","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.1 Konzepte des Kapitels","text":"Wiederholen von Code mit Schleife.Machen Notausgang aus einer Schleife.","code":""},{"path":"guess-the-number-multi-round.html","id":"while-loop","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.2 While-Schleife","text":"Wenn Du etwas wiederholen möchtest, musst Du Schleifen verwenden. Es gibt zwei Arten von Schleifen: die Schleife, welche wiederholt wird, während eine Bedingung wahr ist, und die Schleife, die über Elemente iteriert (wir werden sie später verwenden).Die grundlegende Struktur einer -Schleife istDie <Bedingung> hier ist ein Ausdruck, der entweder True oder False ergibt, genau wie einer ...elif...else Bedingungsanweisung. Auch gelten dieselben Einrückungsregeln, die bestimmen, welcher Code innerhalb der Schleife und welcher außerhalb ist.Mache Übung #1.Lass uns die -Schleife verwenden, um dem Spieler zu erlauben, weiter zu raten, bis er es endlich richtig hat. Du kannst den Code, den Du während des letzten Seminars programmiert hast, kopieren und einfügen oder Du kannst ihn von Grund auf neu erstellen (ich würde Dir dringend empfehlen, Letzteres zu tun!). Die allgemeine Programmstruktur sollte folgende seinSpeichere deinen Code code01.py.Vergiss nicht, die Datei zu dokumentieren und Breakpoints und Step overs zu verwenden, um den Programmfluss zu erkunden.","code":"# Anweisungen vor der Schleife\n\nwhile <Bedingung>:\n    # die inneren Anweisungen werden\n    # so lange ausgeführt, wie\n    # die Bedingung wahr ist\n    \n# Anweisungen nach der Schleife# importiere die Zufallsbibliothek, damit du die randint Funktion verwenden kannst\n\n# generiere eine zufällige Zahl und speichere sie in der Variablen number_picked\n# hole die Eingabe des Spielers, konvertiere sie in eine Ganzzahl und speichere sie in der Variablen guess\n\n# während die Vermutung des Spielers nicht gleich dem Wert ist, den der Computer ausgewählt hat:\n    # gib \"meine Zahl ist kleiner\" oder \"meine Zahl ist größer\" aus, indem Du die if-else Anweisung verwendest\n    # hole die Eingabe des Spielers, konvertiere sie in eine Ganzzahl und speichere sie in der Variablen guess\n    \n# gib \"Ganz genau!\" aus \n# (denn wenn wir hier angekommen sind, bedeutet das, dass die Vermutung gleich der Wahl des Computers ist)"},{"path":"guess-the-number-multi-round.html","id":"versuche-zählen","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.3 Versuche zählen","text":"Jetzt fügen wir eine Variable hinzu, die die Gesamtzahl der Versuche des Spielers zählt. Dazu erstelle eine neue Variable (nennen wir sie attempts oder ähnliches) vor der Schleife und initialisiere sie mit 1 (weil der erste Versuch vor dem Betreten der Schleife vom Spieler gemacht wird). Füge jedes Mal, wenn der Spieler eine Vermutung eingibt, 1 hinzu. Erweitern Sie nach der Schleife die Nachricht \"Ganz genau!\" um Informationen über die Anzahl der Versuche. Nutze String-Formatierung, um alles schön aussehen zu lassen, z.B.: \"Ganz genau und du hast nur 5 Versuche gebraucht!\". Überprüfe, ob die Anzahl der benötigten Versuche mit der Anzahl der vom Programm gemeldeten Versuche übereinstimmt!Speichere deinen Code code02.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"break","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.4 Abbruch (und Ausstieg)","text":"Der Code innerhalb der -Schleife wird wiederholt ausgeführt, während die Bedingung True ist und, wichtig ist, der gesamte Code innerhalb wird ausgeführt, bevor die Bedingung erneut bewertet wird. Manchmal musst du jedoch früher abbrechen, ohne den verbleibenden Code auszuführen. Dafür hat Python eine break Anweisung, die dazu führt, dass das Programm die Schleife sofort verlässt, ohne den Rest des Codes innerhalb der Schleife auszuführen, dass das Programm mit dem Code nach der Schleife fortfährt.Mache Übung #2, um dein Verständnis zu vertiefen.","code":"# dieser Code wird vor der Schleife ausgeführt\n\nwhile <irgendeine_Bedingung>:\n  # dieser Code wird bei jeder Iteration ausgeführt\n  \n    if <irgendeine_andere_Bedingung>:\n        break\n  \n  # dieser Code wird bei jeder Iteration ausgeführt, aber nicht, wenn du aus der Schleife herausbrichst\n\n# dieser Code wird nach der Schleife ausgeführt"},{"path":"guess-the-number-multi-round.html","id":"begrenzung-der-anzahl-der-versuche-mittels-break","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.5 Begrenzung der Anzahl der Versuche mittels Break","text":"Setzen wir den Spieler unter Druck! Entscheide dich für eine maximale Anzahl Versuchen, die du erlaubst, und speichere sie als KONSTANTE. Wähle einen passenden Namen (z.B. MAX_ATTEMPTS) und BEACHTE, GROßBUCHSTABEN für den Namen einer Konstanten! Nun nutze break um die -Schleife zu verlassen, wenn die aktuelle Versuchszahl größer als MAX_ATTEMPTS ist. Überlege, wann (innerhalb des Codes innerhalb der Schleife) du dies prüfen solltest.Speichere deinen Code code03.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"korrekte-end-of-game-nachricht","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.6 Korrekte End-of-Game-Nachricht","text":"Aktualisieren wir die finale Nachricht. Im Moment steht dort “Ganz genau…”, weil wir davon ausgegangen sind, dass das Programm die Schleife nur dann verlässt, wenn der Spieler die richtige Antwort gegeben hat. Bei begrenzten Versuchen ist das nicht unbedingt der Fall. Es gibt jetzt zwei Gründe, warum es die -Schleife verlassen hat:Der Spieler hat die richtige Antwort gegeben.Dem Spieler sind die Versuche ausgegangen.Verwende die -else Bedingungsanweisung, um eine passende Nachricht auszugeben. Zum Beispiel drucke \"Viel Glück beim nächsten Mal!\", wenn der Spieler verloren hat (die Versuche ausgegangen sind).Speichere deinen Code code04.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"begrenzung-der-anzahl-der-versuche-ohne-break","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.7 Begrenzung der Anzahl der Versuche ohne Break","text":"Obwohl es meine Idee war, die break Anweisung hinzuzufügen, solltest du sie sparsam verwenden. Ohne break gibt es eine einzige Stelle im Code, die du überprüfen musst, um zu verstehen, wann das Programm die Schleife verlassen wird: die Bedingung. Wenn du jedoch ein break hinzufügst, hast du jetzt zwei Stellen, die geprüft werden müssen. Und jedes zusätzliche break fügt weitere hinzu. Das bedeutet aber nicht, dass du sie um jeden Preis vermeiden solltest! Du solltest sie verwenden, wenn dadurch der Code leichter zu verstehen ist. Aber überprüfe immer, ob eine modifizierte Bedingung auch den Trick tun könnte.Probieren wir genau das aus. Ändere deinen Code ab, dass er ohne die break Anweisung funktioniert. Du brauchst eine kompliziertere Bedingung für deine -Schleife, dass sie sich wiederholt, solange die Vermutung des Spielers falsch ist und die Anzahl der Versuche noch kleiner ist als die maximal erlaubte. Teste, ob dein Code sowohl funktioniert, wenn du gewinnst als auch wenn du verlierst.Speichere deinen Code code05.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"verbleibende-versuche-anzeigen","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.8 Verbleibende Versuche anzeigen","text":"Es geht alles um die Benutzeroberfläche! Ändere die Eingabeaufforderung , dass sie die Anzahl der verbleibenden Versuche enthält. Z.B. \"Bitte gebe eine Vermutung ein, du hast noch X Versuche übrig\".Speichere deinen Code code06.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"guess-the-number-repeat-game","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.9 Wiederholung des Spiels","text":"Lass uns dem Spieler die Option geben, noch einmal zu spielen. Das bedeutet, dass wir allen aktuellen Code eine weitere -Schleife packen (das nennt man verschachtelte Schleifen), die lange wiederholt wird, wie der Spieler weiterspielen möchte. Der Code sollte folgendermaßen aussehen:Achte besonders auf die Einrückungen, um den Code richtig zu gruppieren!Setze deinen Code code07.py.","code":"# importiere die random Bibliothek, damit du die Funktion randint verwenden kannst\n\n# definiere MAX_ATTEMPTS\n\n# definiere eine Variable namens \"want_to_play\" und setze sie auf True\n# solange der Spieler noch spielen möchte\n  \n  # dein aktueller funktionierender Spielcode kommt hierher\n  \n  # frage den Benutzer mit der input-Funktion, z.B. \"Möchtest du nochmal spielen? J/N\"\n  # want_to_play sollte True sein, wenn die Benutzereingabe gleich \"J\" oder \"j\" ist\n  \n# allerletzte Nachricht, zum Beispiel \"Vielen Dank fürs Spielen!\""},{"path":"guess-the-number-multi-round.html","id":"du-benötigst-keinen-vergleich-wenn-du-bereits-den-wert-hast","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.10 Du benötigst keinen Vergleich, wenn du bereits den Wert hast","text":"deinem aktualisierten Code hast du eine Variable want_to_play, die entweder True oder False ist. Sie wird der Schleife verwendet, die sich wiederholt, solange ihr Wert True ist. Manchmal schreiben Leute want_to_play == True, um das auszudrücken. Obwohl es technisch korrekt und mit Sicherheit korrekt funktionieren wird, ist es auch redundant. Da want_to_play nur True oder False sein kann, verwandelt sich dieser Vergleich True == True (natürlich True ist) oder False == True (False ist). Das Vergleichen eines jeden Werts mit True ergibt genau denselben Wert. Daher kannst du einfach want_to_play: schreiben und den logischen Wert direkt verwenden.","code":""},{"path":"guess-the-number-multi-round.html","id":"bestes-ergebnis","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.11 Bestes Ergebnis","text":"Ein “richtiges” Spiel behält normalerweise die Leistung der Spieler im Auge. Lass uns die geringste Anzahl von Versuchen aufzeichnen, die der Spieler benötigt hat, um die Zahl zu erraten. Dazu erstellst du eine neue Variable fewest_attempts und setzt sie auf MAX_ATTEMPTS (das ist schlecht, wie der Spieler sein kann). Überlege, wo du sie erstellen musst. Du solltest sie nach jeder Spielrunde aktualisieren. Füge die Information über “Bisher das Beste” die finale Rundennachricht ein.Setze deinen Code code08.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"zählen-der-spielrunden","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.12 Zählen der Spielrunden","text":"Lass uns zählen, wie oft der Spieler das Spiel gespielt hat. Die Idee und Umsetzung ist dieselbe wie beim Zählen der Versuche. Erstelle eine neue Variable, initialisiere sie auf 0, erhöhe sie um 1, wann immer eine neue Runde beginnt. Füge die Gesamtanzahl der gespielten Spiele die allerletzte Nachricht ein, z.B. “Danke, dass du das Spiel X Mal gespielt hast!”Setze deinen Code code09.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"einarmiger-bandit-mit-mehreren-runden","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.13 Einarmiger Bandit mit mehreren Runden","text":"Ende des vorherigen Kapitels hast du ein einarmiger Banditen-Spiel mit einer einzigen Runde programmiert. Du weißt bereits alles, du brauchst, um eine Version mit mehreren Runden zu implementieren, und ihre Struktur ähnelt der des Mehr-Runden-Zahlenraten-Spiels, das du gerade implementiert hast, ist aber einfacher.Lass den Spieler mit einem Anfangspot Geld starten, sagen wir 10 Münzen. Jede Runde kostet 1 Münze, bei drei gleichen bekommt man 10 Münzen ausgezahlt, während man bei einem Paar 2 Münzen ausgezahlt bekommt (du kannst die Auszahlungen nach Belieben ändern). jeder Runde:Nimm eine Münze aus dem Topf (Preis für das Spiel).Würfle die Würfel (das hast du bereits implementiert).Informiere den Spieler über das Ergebnis (das hast du auch schon implementiert).Füge Münzen zum Topf hinzu, falls nötig.Drucke die Anzahl der im Topf verbliebenen Münzen aus.Frage den Spieler, ob er weitermachen möchte.Sonderfall: Wenn dem Spieler die Münzen ausgehen, ist das Spiel definitiv vorbei.Setze deinen Code code10.py.","code":""},{"path":"guess-the-number-multi-round.html","id":"abschluss","chapter":"Kapitel 6 Errate die Zahl: Eine Mehr-Runden-Ausgabe","heading":"6.14 Abschluss","text":"Sehr gut, du hast jetzt zwei richtige funktionierende Computerspiele mit Spielrunden, begrenzten Versuchen, Bestleistung und vielem mehr! Pack den Ordner eine Zip-Datei und reiche sie ein.","code":""},{"path":"guess-the-number-ai.html","id":"guess-the-number-ai","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"Kapitel 7 Guess the Number: KI ist dran","text":"Lass uns das Spiel Rate die Zahl noch einmal programmieren18 aber die Rollen umkehren. Jetzt wählst du eine Zahl und der Computer wird versuchen, sie zu erraten. Denke über den Algorithmus nach, den ein Computer dafür verwenden könnte, bevor du den nächsten Absatz liest19.Der optimale Weg, dies zu tun, besteht darin, die Mitte des Intervalls für eine Vermutung zu verwenden. Auf diese Weise schließt du die Hälfte der Zahlen aus, die entweder größer oder kleiner sind als deine Vermutung (oder du errätst die Zahl korrekt, natürlich). Wenn du also weißt, dass die Zahl zwischen 1 und 10 liegt, solltest du die Dinge der Mitte teilen, also 5 oder 6 wählen, da du nicht 5,5 wählen kannst (wir gehen davon aus, dass du nur ganze Zahlen verwenden kannst). Wenn dein Gegner dir sagt, dass seine Zahl größer ist als deine Wahl, weißt du, dass sie irgendwo zwischen deiner Vermutung und der ursprünglichen Obergrenze liegen muss, z. B. zwischen 5 und 10. Umgekehrt, wenn der Gegner “niedriger” antwortet, liegt die Zahl zwischen der unteren Grenze und deiner Vermutung, z. B. zwischen 1 und 5. Bei deinem nächsten Versuch teilst du das neue Intervall und wiederholst dies, bis du entweder die richtige Zahl errätst oder nur noch ein Intervall mit nur einer Zahl übrig hast. Dann musst du nicht mehr raten.Um dieses Programm zu implementieren, musst du Funktionen kennen lernen, wie man sie dokumentiert und wie man eigene Bibliotheken verwendet. Hol dir das Übungsnotebook, bevor wir anfangen!","code":""},{"path":"guess-the-number-ai.html","id":"konzepte-des-kapitels.","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.1 Konzepte des Kapitels.","text":"Schreiben deiner eigenen Funktionen.Verstehen von variablen Bereichen.Annahme von standardisierten Wegen, um deinen Code zu dokumentieren.Verwendung deiner eigenen Bibliotheken.","code":""},{"path":"guess-the-number-ai.html","id":"guess-the-number-players-response","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.2 Spielerantwort","text":"Lass uns warm werden, indem wir einen Code schreiben, der es einem Spieler ermöglicht, auf den Tipp des Computers zu reagieren. Denke daran, es gibt nur drei Möglichkeiten: deine Zahl ist größer, kleiner oder gleich der Vermutung des Computers. Ich würde vorschlagen, die Symbole >, < und = zu verwenden, um dies zu kommunizieren. Du musst den Code schreiben, der den Spieler auffordert, seine Antwort einzugeben, bis er eines dieser Symbole eingibt. D.h., die Aufforderung zur Eingabe sollte wiederholt werden, wenn sie etwas anderes eingeben. Du musst also definitiv die input([prompt]) und eine Schleife verwenden. Überlege dir eine nützliche und informative Aufforderungsnachricht dafür. Teste, ob es funktioniert. Breakpoints können hier sehr hilfreich sein.Füge deinen Code code01.py ein.","code":""},{"path":"guess-the-number-ai.html","id":"function","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.3 Funktionen","text":"Du weißt bereits, wie man Funktionen verwendet, jetzt ist es der Zeit, mehr darüber zu lernen, warum du dich darum kümmern solltest. Der Zweck einer Funktion besteht darin, bestimmten Code, der eine einzige Berechnung durchführt, zu isolieren und ihn somit testbar und wiederverwendbar zu machen. Lass uns den letzten Satz Stück für Stück anhand von Beispielen durchgehen.","code":""},{"path":"guess-the-number-ai.html","id":"eine-funktion-führt-eine-einzige-berechnung-durch","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.3.1 Eine Funktion führt eine einzige Berechnung durch","text":"Ich habe dir bereits erzählt, dass das Lesen von Code einfach ist, weil jede Aktion für Computer auf einfache und klare Weise ausgedrückt werden muss. Allerdings können viele einfache Dinge sehr überwältigend und verwirrend sein. Denke den finalen Code vom letzten Seminar: Wir hatten zwei Schleifen mit bedingten Anweisungen, die darin verschachtelt waren. Füge ein paar mehr hinzu und du hast viele Zweige zu verfolgen, dass du nie ganz sicher sein kannst, passieren wird. Das liegt daran, dass unsere Wahrnehmung und unser Arbeitsgedächtnis, die du benutzt, um alle Zweige zu verfolgen, auf nur etwa vier Elemente beschränkt sind20.Daher sollte eine Funktion eine Berechnung / Aktion durchführen, die konzeptionell klar ist und deren Zweck direkt aus ihrem Namen oder höchstens aus einem einzelnen Satz, der sie beschreibt, verstanden werden sollte21. Der Name einer Funktion sollte typischerweise ein Verb sein, denn es geht darum, eine Aktion auszuführen. Wenn du mehr als einen Satz brauchst, um zu erklären, die Funktion tut, solltest du erwägen, den Code weiter aufzuteilen. Das bedeutet nicht, dass die gesamte Beschreibung/Dokumentation einen einzigen Satz passen muss. Die vollständige Beschreibung kann lang sein, insbesondere wenn die zugrunde liegende Berechnung komplex ist und es viele Parameter zu berücksichtigen gibt. Dies sind jedoch optionale Details, die dem Leser sagen, wie die Funktion ihre Aufgabe erledigt oder wie ihr Verhalten verändert werden kann. Trotzdem sollten sie der Lage sein, zu verstehen, die Aufgabe ist, nur aus dem Namen oder aus einem einzigen Satz. Ich wiederhole mich und betone dies sehr, weil konzeptionell einfache Funktionen, die nur eine Aufgabe erfüllen, die Grundlage für einen klaren, robusten, wiederverwendbaren Code sind. Und das zukünftige Du wird sehr dankbar sein, dass es mit dem einfach zu verstehenden, isolierten, zuverlässigen Code arbeiten muss, den du geschrieben hast.","code":""},{"path":"guess-the-number-ai.html","id":"funktion-isoliert-code-vom-rest-des-programms","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.3.2 Funktion isoliert Code vom Rest des Programms","text":"Isolierung bedeutet, dass dein Code einem separaten Bereich ausgeführt wird, dem nur Funktionselemente (begrenzte Anzahl von Werten, die du von außen mit fester Bedeutung übergibst) und lokale Variablen, die du innerhalb der Funktion definierst, existieren. Du hast keinen Zugriff auf Variablen, die im außenstehenden Skript definiert sind22 oder auf Variablen, die anderen Funktionen definiert sind. Umgekehrt haben weder das globale Skript noch andere Funktionen Zugriff auf Variablen und Werte, die du innen verwendest. Das bedeutet, dass du nur den Code innerhalb der Funktion studieren musst, um zu verstehen, wie sie funktioniert. Entsprechend sollte der Code, den du schreibst, unabhängig von jedem globalen Kontext sein, dem die Funktion verwendet werden kann. Die Isolierung ist sowohl praktisch (kein Zugriff auf Variablen von außen während der Laufzeit bedeutet weniger Chancen, dass Dinge schrecklich schief gehen) als auch konzeptionell (kein weiterer Kontext ist erforderlich, um den Code zu verstehen).","code":""},{"path":"guess-the-number-ai.html","id":"funktion-macht-code-einfacher-zu-testen","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.3.3 Funktion macht Code einfacher zu testen","text":"Du kannst sogar mäßig komplexe Programme nur dann erstellen, wenn du sicher sein kannst, individuelle Codeabschnitte unter jeder möglichen Bedingung tun. Erzeugen sie die richtigen Ergebnisse? Scheitern sie deutlich und heben sie einen richtigen Fehler hervor, wenn die Eingaben falsch sind? Verwenden sie bei Bedarf Standardwerte? Wenn du jedoch alle Teile zusammen testest, bedeutet das eine extreme Anzahl von Durchläufen, da du alle möglichen Kombinationen von Bedingungen für einen Teil testen musst, gegeben alle möglichen Bedingungen für einen anderen Teil usw. Funktionen machen dein Leben viel einfacher. Da sie einen einzigen Einstiegspunkt, eine feste Anzahl von Parametern, einen einzigen Rückgabewert und Isolation (siehe oben) haben, kannst du sie unabhängig von anderen Funktionen und dem Rest des Codes einzeln testen. Dies nennt man Unit Testing und es ist ein intensiver Einsatz von automatischem Unit Testing23 das sicherstellt, dass der Code für die absolute Mehrheit der Programme und Apps, die du verwendest, zuverlässig ist24.","code":""},{"path":"guess-the-number-ai.html","id":"funktion-macht-code-wiederverwendbar","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.3.4 Funktion macht Code wiederverwendbar","text":"Manchmal wird dies als Hauptgrund angegeben, Funktionen zu verwenden. Wenn du den Code eine Funktion umwandelst, bedeutet das, dass du die Funktion aufrufen kannst, anstatt den Code zu kopieren und einzufügen. Der letztere Ansatz ist eine schreckliche Idee, da es bedeutet, dass du denselben Code vielen Stellen pflegen musst und du vielleicht nicht einmal sicher bist, wie vielen. Das ist ein Problem, selbst wenn der Code extrem einfach ist. Hier definieren wir einen standardisierten Weg, ein Initial zu berechnen, indem wir das erste Symbol aus einer Zeichenkette nehmen (du wirst später mehr über Indexierung und Slicing erfahren). Der Code ist einfach wie möglich.Stell dir vor, du hast beschlossen, es zu ändern und die ersten zwei Symbole zu verwenden. Wiederum ist die Berechnung nicht kompliziert, verwende einfach [0] ersetzen mit [:2]. Du musst es aber für allen Code tun, der diese Berechnung durchführt. Und du kannst die Option Alles Ersetzen nicht verwenden, weil du manchmal das erste Element für andere Zwecke verwenden könntest. Und wenn du den Code bearbeitest, wirst du zwangsläufig einige Stellen vergessen (ich mache das die ganze Zeit), die Dinge noch inkonsistenter und verwirrender macht. Code eine Funktion zu verwandeln bedeutet, dass du nur einer Stelle ändern und testen musst. Hier ist der ursprüngliche Code, der über eine Funktion implementiert wurde.“alternative” initial computation. Note code uses function stays \nund hier ist die “alternative” Initialberechnung. Beachte, dass der Code, der die Funktion verwendet, gleich bleibtDaher ist es besonders nützlich, Code eine Funktion umzuwandeln, wenn der wiederverwendete Code komplex ist, aber es zahlt sich sogar aus, wenn die Berechnung einfach und trivial ist wie im obigen Beispiel. Mit einer Funktion musst du dir nur um einen einzigen Codeblock Gedanken machen und du kannst sicher sein, dass die gleiche Berechnung immer dann ausgeführt wird, wenn du die Funktion aufrufst (und dass dies nicht mehrere Kopien des Codes sind, die möglicherweise identisch sind oder nicht).Beachte, dass ich den wiederverwendbaren Code als den letzten und den wenigsten wichtigen Grund zur Verwendung von Funktionen putze. Dies liegt daran, dass die anderen drei Gründe weitaus wichtiger sind. Konzeptuell klaren, isolierten und testbaren Code zu haben, ist vorteilhaft, selbst wenn du diese Funktion nur einmal aufrufst. Es erleichert das Verständnis und das Testen des Codes und hilft dir, seine Komplexität zu reduzieren, indem du Codeblöcke durch deren Bedeutung ersetzt. Sieh dir das folgende Beispiel . Der erste Code nimmt das erste Symbol, aber diese Aktion (das erste Symbol nehmen) bedeutet sich nichts, es ist nur eine mechanische Berechnung. Es ist nur der ursprüngliche Kontext initial_for_file = filename[0] oder zusätzliche Kommentare, die ihm seine Bedeutung geben. Im Gegensatz dazu sagt dir das Aufrufen einer Funktion namens compute_initial passiert, da es den Zweck eindeutig macht. Ich vermute, dass der zukünftige Du sehr pro-Eindeutigkeit und anti-Verwirrung ist.","code":"...\ninitial = \"test\"[0]\n...\ninitial_for_file = filename[0]\n...\ninitial_for_website = first_name[0]\n...def generate_initial(full_string):\n    \"\"\"Erzeugt ein Initial mit dem ersten Symbol.\n    \n    Parameter\n    ----------\n    full_string : str\n    \n    Gibt zurück\n    ----------\n    str : einzelnes Symbol\n    \"\"\"\n    return full_string[0]\n\n...\ninitial = generate_initial(\"test\")\n...\ninitial_for_file = generate_initial(filename)\n...\ninitial_for_website = generate_initial(first_name)\n...def generate_initial(full_string):\n    \"\"\"Erzeugt ein Initial mit den ersten ZWEI Symbolen.\n    \n    Parameter\n    ----------\n    full_string : str\n    \n    Gibt zurück\n    ----------\n    str : zwei Symbole lang\n    \"\"\"\n    return full_string[:2]\n\n...\ninitial = generate_initial(\"test\")\n...\ninitial_for_file = generate_initial(filename)\n...\ninitial_for_website = generate_initial(first_name)\n...if filename[0] == \"A\":\n    ...\n    \nif compute_initial(filename) == \"A\":\n    ..."},{"path":"guess-the-number-ai.html","id":"funktionen-in-python","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.4 Funktionen in Python","text":"","code":""},{"path":"guess-the-number-ai.html","id":"definieren-einer-funktion-in-python","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.4.1 Definieren einer Funktion in Python","text":"Eine Funktion Python sieht aus (beachte die Einrückung und : Ende der ersten Zeile)Die Parameter sind optional, ebenso der Rückgabewert. Die minimalste Funktion wäre daherDu musst deine Funktion (einmal!) definieren, bevor du sie aufrufst (ein- oder mehrmals). Du solltest also Funktionen vor dem Code erstellen, der sie verwendet.Mache Übung #1.Du musst auch im Hinterkopf behalten, dass das erneute Definieren einer Funktion (oder das Definieren einer technisch anderen Funktion, die den gleichen Namen hat) die ursprüngliche Definition überschreibt, dass nur die neueste Version davon beibehalten und verwendet werden kann.Mache Übung #2.Obwohl das Beispiel der Übung das Problem leicht erkennen lässt, kann es einem großen Code, der sich über mehrere Dateien erstreckt und verschiedene Bibliotheken verwendet, nicht einfach sein, das gleiche Problem zu lösen!","code":"def <funktionsname>(param1, param2, ...):\n    einige interne Berechnung\n    if bedingung:\n        return ein Wert\n    return ein anderer Wertdef minimal_function():\n    pass # pass bedeutet \"mache nichts\"def do_something():\n    \"\"\"\n    Das ist eine Funktion namens \"do_something\". Sie macht eigentlich nichts.\n    Sie benötigt keine Eingabe und gibt keinen Wert zurück.\n    \"\"\"\n    return\n    \ndef another_function():\n    ...\n    # Wir rufen sie in einer anderen Funktion auf.\n    do_something()\n    ...\n\n# Das ist ein Funktionsaufruf (wir verwenden diese Funktion)\ndo_something()\n\n# Und wir verwenden sie noch einmal!\ndo_something()\n\n# Und wieder, aber durch einen another_function Aufruf\nanother_function()"},{"path":"guess-the-number-ai.html","id":"funktionsargumente","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.4.2 Funktionsargumente","text":"Einige Funktionen benötigen möglicherweise keine Argumente (auch Parameter genannt), da sie eine feste Aktion ausführen:Du musst jedoch möglicherweise Informationen die Funktion über Argumente weitergeben, um zu beeinflussen, wie die Funktion ihre Aktion ausführt. Python listest du einfach Argumente innerhalb der runden Klammern nach dem Funktionsnamen auf (es gibt noch mehr Optionen und Funktionen, aber wir halten es zunächst einfach). Beispielsweise könnten wir eine Funktion schreiben, die das Alter einer Person berechnet und ausgibt, basierend auf zwei Parametern 1) ihrem Geburtsjahr, 2) dem aktuellen Jahr:Es ist eine sehr gute Idee, Funktionen, Parametern und Variablen aussagekräftige Namen zu geben. Der folgende Code wird genau das gleiche Ergebnis liefern, aber das Verständnis warum und wofür es das tut, es tut, wäre viel schwieriger (also benutze immer aussagekräftige Namen!):Wenn du eine Funktion aufrufst, musst du die korrekte Anzahl von Parametern übergeben und sie der richtigen Reihenfolge übergeben, ein weiterer Grund für Funktionen Argumente, aussagekräftige Namen zu haben25.Mache Übung #3.Wenn du eine Funktion aufrufst, werden die Werte, die du die Funktion übermittelst, den Parametern zugewiesen und sie werden als lokale Variablen verwendet (mehr darüber später). Es spielt jedoch keine Rolle, wie du diese Werte erlangt hast, ob sie einer Variable waren, hart codiert wurden oder von einer anderen Funktion zurückgegeben wurden. Wenn du numerische, logische oder Zeichenkettenwerte (unveränderliche Typen) verwendest, kannst du davon ausgehen, dass jede Verbindung zur ursprünglichen Variablen oder Funktion, die sie erzeugt hat, verschwunden ist (wir werden uns später um veränderliche Typen wie Listen kümmern). Wenn du also eine Funktion schreibst oder ihren Code liest, gehst du einfach davon aus, dass sie bei dem Aufruf auf einen bestimmten Wert gesetzt wurde und du kannst den Kontext, dem dieser Aufruf gemacht wurde, ignorieren.","code":"def ping():\n    \"\"\"\n    Maschine, die \"ping!\" macht.\n    \"\"\"\n    print(\"ping!\")def print_age(birth_year, current_year):\n    \"\"\"\n    Gibt das Alter aus, gegeben das Geburtsjahr und das aktuelle Jahr.\n    \n    Parameter\n    ----------\n    birth_year : int\n    current_year : int\n    \"\"\"\n    print(current_year - birth_year)def x(a, b):\n    print(b - a)# hart codiert\nprint_age(1976, 2020)\n\n# mit Werten aus Variablen\ni_was_born = 1976\ntoday_is = 2023\nprint_age(i_was_born, today_is)\n\n# mit Wert aus einer Funktion\ndef get_current_year():\n    return 2023\n\nprint_age(1976, get_current_year())"},{"path":"guess-the-number-ai.html","id":"rückgabewert-der-funktionen-ausgabe","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.4.3 Rückgabewert der Funktionen (Ausgabe)","text":"Deine Funktion kann eine Aktion ausführen, ohne einen Wert den Aufrufer zurückzugeben (das ist es, unsere Funktion print_age getan hat). Du könntest jedoch den Wert stattdessen zurückgeben müssen. Um die Dinge allgemeiner zu gestalten, möchten wir vielleicht eine neue Funktion namens compute_age schreiben, die das Alter zurückgibt, anstatt es zu drucken (wir können es immer selbst drucken).Beachte, dass selbst wenn eine Funktion den Wert zurückgibt, dieser nur beibehalten wird, wenn er tatsächlich verwendet wird (einer Variablen gespeichert, als Wert verwendet etc.). Ein einfacher Aufruf speichert den zurückgegebenen Wert also nicht irgendwo!Mache Übung #4.","code":"def compute_age(birth_year, current_year):\n    \"\"\"\n    Berechnet das Alter, gegeben das Geburtsjahr und das aktuelle Jahr.\n\n    Parameter\n    ----------\n    birth_year : int\n    current_year : int\n    \n    Gibt zurück\n    ----------\n    int : age\n    \"\"\"\n    return current_year - birth_year"},{"path":"guess-the-number-ai.html","id":"anwendungsbereiche-für-unveränderbare-werte","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.4.4 Anwendungsbereiche (für unveränderbare Werte)","text":"Wie wir oben besprochen haben, isoliert das Umwandeln von Code eine Funktion ihn, sodass er seinem eigenen Anwendungsbereich läuft. Python existiert jede Variable dem Anwendungsbereich, dem sie definiert wurde. Wenn sie im globalen Skript definiert wurde, existiert sie diesem globalen Anwendungsbereich als globale Variable. Sie ist jedoch nicht zugänglich (zumindest nicht ohne besondere Anstrengungen über einen global Operator) innerhalb einer Funktion. Umgekehrt existieren die Parameter einer Funktion und alle innerhalb einer Funktion definierten Variablen nur innerhalb dieser Funktion. Sie sind für die Außenwelt vollkommen unsichtbar und können nicht von einem globalen Skript oder von einer anderen Funktion aus abgerufen werden. Ebenso haben alle Änderungen, die du Funktionsparameter oder der lokalen Variable vornimmst, keinerlei Auswirkungen auf die Außenwelt.Der Zweck von Anwendungsbereichen besteht darin, einzelne Codeabschnitte voneinander zu isolieren, sodass das Ändern von Variablen innerhalb eines Anwendungsbereichs keine Auswirkungen auf alle anderen Anwendungsbereiche hat. Das bedeutet, dass du beim Schreiben oder Debuggen des Codes keine Angst vor Code anderen Anwendungsbereichen haben musst und dich nur auf den Code konzentrieren musst, dem du arbeitest. Da Anwendungsbereiche isoliert sind, können sie gleichnamige Variablen haben, die jedoch keine Beziehung zueinander haben, da sie ihren eigenen parallelen Universen existieren26. Wenn du also wissen möchten, welchen Wert eine Variable hat, musst du nur innerhalb des Anwendungsbereichs schauen und alle anderen Anwendungsbereiche ignorieren (auch wenn die Namen übereinstimmen!).Mache Übung #5.","code":"# dies ist die Variable `x` im globalen Anwendungsbereich\nx  = 5 \n\ndef f1():\n  # Das ist die Variable `x` im Anwendungsbereich der Funktion f1\n  # Sie hat den gleichen Namen wie die globale Variable, aber\n  # hat keine Beziehung zu ihr: viele Leute heißen Sasha, \n  # sind aber immer noch unterschiedliche Personen. Was auch immer\n  # mit `x` in f1 passiert, bleibt im Anwendungsbereich von f1.\n  x = 3\n\n  \ndef f2(x):\n  # Dies ist der Parameter `x` im Anwendungsbereich der Funktion f2.\n  # Wieder keine Beziehung zu anderen globalen oder lokalen Variablen.\n  # Es ist ein völlig getrenntes Objekt, es passiert einfach, \n  # dass es den gleichen Namen hat (wieder einfach Namensvettern)\n  print(x)"},{"path":"guess-the-number-ai.html","id":"spielerantwort-als-funktion","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.5 Spielerantwort als Funktion","text":"Lassen wir diese Theorie über Funktionen die Praxis umsetzen. Verwende den Code, den du erstellt hast, um die Spielerantwort zu erhalten und verwandle ihn eine Funktion. Sie sollte keine Parameter haben (zumindest vorerst) und sollte die Spielerantwort zurückgeben. Ich schlage vor, dass du sie input_response (oder ähnlich) nennst. Überprüfe, ob der Code funktioniert, indem du diese Funktion aus dem Hauptskript aufrufst.Füge deinen Code code02.py ein.","code":""},{"path":"guess-the-number-ai.html","id":"eine-funktion-debuggen","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.6 Eine Funktion debuggen","text":"Jetzt, da du deine erste Funktion hast, kannst du den Sinn von drei Schritt über/Schritt /Schritt heraus-Tasten verstehen, die dir der Debugger anbietet. Kopiere den folgenden Code eine separate Datei (nenne sie zum Beispiel test01.py).Setze zuerst einen Breakpoint auf die Zeile im Hauptskript, die die Funktion f2() aufruft. Starte den Debugger über F5 und das Programm wird dieser Zeile anhalten. Wenn du nun F10 drückst (Schritt über), geht das Programm zur nächsten Zeile print(z). Wenn du aber stattdessen F11 drückst (Schritt hinein), wird das Programm die Funktion hineingehen und zur Zeile x = x + 5 gehen. Innerhalb der Funktion hast du die gleichen beiden Möglichkeiten, die wir gerade angeschaut haben, aber du kannst auch Shift+F11 drücken, um aus der Funktion herauszugehen. Hier wird das Programm den gesamten Code durchlaufen, bis du die nächste Zeile außerhalb der Funktion erreichst (du solltest wieder bei print(z) ankommen). Experimentiere mit dem Setzen von Breakpoints verschiedenen Zeilen und dem Über-/Hinein-/Herausschreiten, um dich mit diesen nützlichen Debugging-Tools vertraut zu machen.Setze nun den Breakpoint innerhalb der f1() Funktion und führe den Code über F5 aus. Schau dir die linke Fensterseite , du wirst einen Call Stack Reiter sehen. Während die gelb hervorgehobene Zeile im Editor zeigt, wo du gerade bist (sollte innerhalb der f1() Funktion sein), zeigt der Call Stack dir, wie du dorthin gekommen bist. diesem Fall sollte es zeigen:Die Aufrufe sind von unten nach oben gestapelt, das bedeutet, dass eine Funktion im Hauptmodul Zeile 9 aufgerufen wurde, du der Funktion f2 Zeile 7 gelandet bist und dann der Funktion f1 und Zeile 2. Experimentiere mit dem Ein- und Austreten aus Funktionen und behalte dabei den Call Stack im Auge. Du wirst diese Informationen vielleicht nicht oft benötigen, aber sie könnten unseren späteren Projekten mit mehreren verschachtelten Funktionsaufrufen nützlich sein.","code":"def f1(x, y):\n  return x / y\n  \ndef f2(x, y):\n  x = x + 5\n  y = y * 2\n  return f1(x, y)\n  \nz = f2(4, 2)\nprint(z)"},{"path":"guess-the-number-ai.html","id":"numpy-docstring","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.7 Deine Funktion dokumentieren","text":"Eine Funktion zu schreiben, ist nur die halbe Arbeit. Du musst sie dokumentieren! Erinnere dich, das ist eine gute Gewohnheit, die deinen Code einfach zu benutzen und wiederzuverwenden macht. Es gibt verschiedene Möglichkeiten, den Code zu dokumentieren, aber wir werden die NumPy Docstring Konvention verwenden. Hier ist ein Beispiel für eine solche dokumentierte FunktionSchau dir das Handbuch und dokumentiere die input_response Funktion. Du wirst den Abschnitt Parameter nicht benötigen, da sie derzeit keine Eingaben akzeptiert.Aktualisiere deinen Code code02.py.","code":"def generate_initial(full_string):\n    \"\"\"Erzeugt eine Initiale mit dem ersten Symbol.\n    \n    Parameter\n    ----------\n    full_string : str\n    \n    Gibt zurück\n    ----------\n    str : Einzelnes Symbol\n    \"\"\"\n    return full_string[0]"},{"path":"guess-the-number-ai.html","id":"verwendung-der-aufforderung","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.8 Verwendung der Aufforderung","text":"der Zukunft werden wir nach einer bestimmten Zahl fragen, die eine aktuelle Vermutung des Computers ist, daher können wir keine feste Aufforderungsnachricht verwenden. Ändere die input_response Funktion, indem du einen guess Parameter hinzufügst. Dann ändere die Aufforderung, die du für die input() verwendet hast, um den Wert diesem Parameter einzuschließen. Aktualisiere die Dokumentation der Funktionen. Teste es, indem du mit verschiedenen Werten für den guess Parameter aufrufst und eine unterschiedliche Aufforderung zur Antwort siehst.Gib deinen Code code03.py ein.","code":""},{"path":"guess-the-number-ai.html","id":"aufteilen-des-intervalls-in-der-mitte","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.9 Aufteilen des Intervalls in der Mitte","text":"Lass uns ein bisschen mehr üben, Funktionen zu schreiben. Denke daran, dass der Computer die Mitte des Intervalls als Vermutung verwenden sollte. Erstelle eine Funktion (nennen wir sie split_interval() oder ähnlich), die zwei Parameter – lower_limit und upper_limit - entgegennimmt und eine Ganzzahl zurückgibt, die der Mitte des Intervalls nächsten liegt. Der einzige knifflige Teil ist, wie du eine potentiell Gleitkommazahl (z.B. wenn du versuchst, sie für das Intervall 1..10 zu finden) eine Ganzzahl umwandelst. Du kannst dafür die Funktion int() verwenden. Lies jedoch die Dokumentation sorgfältig durch, da sie keine korrekte Rundung durchführt (tut sie? Lies die Dokumentation!). Du solltest daher die Zahl auf die nächste Ganzzahl round() runden, bevor du sie umwandelst.Schreibe eine Funktion, dokumentiere sie und teste sie, indem du überprüfst, ob die Zahlen korrekt sind.Gib deine split_interval() Funktion und den Testcode code04.py ein.","code":""},{"path":"guess-the-number-ai.html","id":"einzelne-runde","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.10 Einzelne Runde","text":"Du hast beide Funktionen, die du brauchst, also lass uns den Code schreiben, um das Spiel zu initialisieren und eine einzelne Runde zu spielen. Die Initialisierung läuft darauf hinaus, zwei Variablen zu erstellen, die den unteren und oberen Grenzwerten des Spielbereichs entsprechen (wir haben bisher 1 bis 10 verwendet, aber das kannst du natürlich immer ändern). Als nächstes sollte der Computer eine Vermutung generieren (dafür hast du deine split_interval() Funktion) und den Spieler nach der Vermutung fragen (das ist die input_response() Funktion). Sobald du die Antwort hast (einer separaten Variable gespeichert, denke dir selbst einen Namen aus), aktualisiere entweder die obere oder untere Grenze mit einem ..elif..else Ausdruck, basierend auf der Antwort des Spielers (wenn der Spieler gesagt hat, dass seine Zahl höher ist, bedeutet das, dass das neue Intervall von guess bis upper_limit reicht, und umgekehrt, wenn sie niedriger ist). Drucke eine freudige Nachricht aus, wenn die Vermutung des Computers richtig war.Gib beide Funktionen und den Skriptcode code05.py ein.","code":""},{"path":"guess-the-number-ai.html","id":"mehrere-runden","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.11 Mehrere Runden","text":"Erweitere das Spiel, dass der Computer lange rät, bis er schließlich gewinnt. Du weißt bereits, wie man die Schleife verwendet, überlege nur, wie du die Antwort des Teilnehmers als eine Schleifenbedingungsvariable verwenden kannst. Denke auch über den Anfangswert dieser Variable nach und wie du sie verwenden kannst, um input_response() nur einer Stelle aufzurufen.Gib den aktualisierten Code code06.py ein.","code":""},{"path":"guess-the-number-ai.html","id":"nochmal-spielen","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.12 Nochmal spielen","text":"Ändere den Code , dass du dieses Spiel mehrere Male spielen kannst. Du weißt bereits, wie das geht und das Einzige, du beachten musst, ist, wo genau du die Initialisierung vor jedem Spiel durchführen sollst. Da du das schon für das letzte Spiel implementiert hast, könntest du versucht sein zu sehen, wie du es gemacht hast oder sogar den Code zu kopieren und einzufügen. Allerdings würde ich empfehlen, es von Grund auf neu zu schreiben. Denke daran, dein Ziel ist es nicht, ein Programm zu schreiben, sondern zu lernen, wie man das macht und daher ist der Weg wichtiger als das Ziel.Gib den aktualisierten Code code07.py ein.","code":""},{"path":"guess-the-number-ai.html","id":"bester-punktestand","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.13 Bester Punktestand","text":"Füge den Code hinzu, um die Anzahl der Versuche zu zählen, die der Computer jeder Runde benötigt hat, und melde den besten Punktestand (wenigste Anzahl von Versuchen), nachdem das Spiel vorbei ist. Du wirst eine Variable brauchen, um die Anzahl der Versuche zu zählen, und eine, um den besten Punktestand zu speichern. Versuche erneut, es zu schreiben, ohne auf dein vorheriges Spiel zu schauen.Gib den aktualisierten Code code08.py ein.","code":""},{"path":"guess-the-number-ai.html","id":"verwenden-deiner-eigenen-bibliotheken","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.14 Verwenden deiner eigenen Bibliotheken","text":"Du weißt bereits, wie man bestehende Bibliotheken verwendet, aber du kannst auch deine eigenen erstellen und verwenden. Nimm die beiden Funktionen, die du entwickelt hast, und lege sie eine neue Datei namens utils.py (vergiss nicht, einen mehrzeiligen Kommentar Anfang der Datei hinzuzufügen, um dich daran zu erinnern, drin ist!). Kopiere den verbleibenden Code (das globale Skript) code09.py. Es wird seinem aktuellen Zustand nicht funktionieren, da es die beiden Funktionen nicht finden wird (versuche es, um die Fehlermeldung zu sehen), daher musst du aus deinem eigenen Modul utils importieren. Das Importieren funktioniert genau wie bei anderen Bibliotheken. Beachte, dass der Name deines Moduls utils ist (ohne die Endung), auch wenn deine Datei utils.py heißt.Gib die Funktionen utils.py ein, den verbleibenden Code code09.py.","code":""},{"path":"guess-the-number-ai.html","id":"keep-imports-tidy","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.15 Ordnung muss sein!","text":"Bisher hast du höchstens eine Bibliothek importiert. Da Python jedoch hoch modular ist, ist es sehr verbreitet, viele Importe einer einzelnen Datei zu haben. Es gibt einige Regeln, die es einfacher machen, die Importe zu verfolgen. Wenn du Bibliotheken importierst, sollten alle Import-Anweisungen oben deiner Datei stehen und du solltest vermeiden, sie zufälliger Reihenfolge zu platzieren. Die empfohlene Reihenfolge ist 1) Systembibliotheken, wie os oder random; 2) Drittanbieter-Bibliotheken, wie psychopy; 3) deine Projektmodule. Und innerhalb jedes Abschnitts solltest du die Bibliotheken alphabetisch anordnen, sodass beispielsweiseDas mag für unseren einfachen Code nicht besonders nützlich aussehen, aber wenn deine Projekte wachsen, musst du mehr und mehr Bibliotheken einbeziehen. Wenn du sie dieser Reihenfolge hältst, ist es einfach zu verstehen, welche Bibliotheken du verwendest und welche nicht standardmäßig sind. Die alphabetische Reihenfolge bedeutet, dass du schnell überprüfen kannst, ob eine Bibliothek enthalten ist, da du schnell den Ort finden kannst, dem ihre Import-Anweisung erscheinen sollte.","code":"import os\nimport random"},{"path":"guess-the-number-ai.html","id":"videospiele-mit-video","chapter":"Kapitel 7 Guess the Number: KI ist dran","heading":"7.16 Videospiele mit Video","text":"Reiche deine Dateien ein und mach dich bereit für mehr Aufregung, denn wir wechseln zu “richtigen” Videospielen mit PsychoPy.","code":""}]
